<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Geometries.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
            <remarks>
            The OpenGIS Abstract Specification defines a simple Surface as consisting of a single ‘patch’ that is
            associated with one ‘exterior boundary’ and 0 or more ‘interior’ boundaries. Simple surfaces in threedimensional
            space are isomorphic to planar surfaces. Polyhedral surfaces are formed by ‘stitching’ together
            simple surfaces along their boundaries, polyhedral surfaces in three-dimensional space may not be planar as
            a whole.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.Geometry">
            <summary>
            <see cref="T:SharpMap.Geometries.Geometry"/> is the root class of the Geometry Object Model hierarchy.
            <see cref="T:SharpMap.Geometries.Geometry"/> is an abstract (non-instantiable) class.
            </summary>
            <remarks>
            <para>The instantiable subclasses of <see cref="T:SharpMap.Geometries.Geometry"/> defined in the specification are restricted to 0, 1 and twodimensional
            geometric objects that exist in two-dimensional coordinate space (R^2).</para>
            <para>All instantiable geometry classes described in this specification are defined so that valid instances of a
            geometry class are topologically closed (i.e. all defined geometries include their boundary).</para>
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.IGeometry">
            <summary>
            Defines basic interface for a Geometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Envelope">
            <summary>
            The minimum bounding box for this Geometry, returned as a <see cref="T:SharpMap.Geometries.Geometry"/>. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.GetBoundingBox">
            <summary>
            The minimum <see cref="T:SharpMap.Geometries.BoundingBox"/> for this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <returns><see cref="T:SharpMap.Geometries.BoundingBox"/> for this <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsText">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known text representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsBinary">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known binary representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ToString">
            <summary>
            Returns a WellKnownText representation of the <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsEmpty">
            <summary>
            If true, then this <see cref="T:SharpMap.Geometries.Geometry"/> represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsSimple">
            <summary>
             Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the <see cref="T:SharpMap.Geometries.Geometry"/> is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/>. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is spatially related to another <see cref="T:SharpMap.Geometries.Geometry"/>, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.Geometry"/> to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially equal' to another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially disjoint' from another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially intersects' another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially touches' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially crosses' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially within' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially contains' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially overlaps' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Buffer(System.Double)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents all points whose distance from this <see cref="T:SharpMap.Geometries.Geometry"/>
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ConvexHull">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the convex hull of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set intersection of this <see cref="T:SharpMap.Geometries.Geometry"/>
            with another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to intersect with</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set intersection of this <see cref="T:SharpMap.Geometries.Geometry"/> with another <see cref="T:SharpMap.Geometries.Geometry"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set union of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set difference of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to compare to</param>
            <returns><see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to compare to</param>
            <returns><see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.SpatialReference">
            <summary>
            Gets or sets the spatial reference system associated with the <see cref="T:SharpMap.Geometries.Geometry"/>.
            A <see cref="T:SharpMap.Geometries.Geometry"/> may not have had a spatial reference system defined for
            it, in which case *spatialRef will be NULL.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.Dimension">
            <summary>
             The inherent dimension of this <see cref="T:SharpMap.Geometries.Geometry"/> object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Envelope">
            <summary>
            The minimum bounding box for this <see cref="T:SharpMap.Geometries.Geometry"/>, returned as a <see cref="T:SharpMap.Geometries.Geometry"/>. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
            <remarks>The envelope is actually the <see cref="T:SharpMap.Geometries.BoundingBox"/> converted into a polygon.</remarks>
            <seealso cref="M:SharpMap.Geometries.Geometry.GetBoundingBox"/>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GetBoundingBox">
            <summary>
            The minimum bounding box for this <see cref="T:SharpMap.Geometries.Geometry"/>, returned as a <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsText">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known text representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsBinary">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known binary representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ToString">
            <summary>
            Returns a WellKnownText representation of the <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromText(System.String)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on a WellKnownText string
            </summary>
            <param name="WKT">Well-known Text</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromWKB(System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on a WellKnownBinary byte array
            </summary>
            <param name="WKB">Well-known Binary</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsEmpty">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is the empty geometry . If true, then this
            <see cref="T:SharpMap.Geometries.Geometry"/> represents the empty point set, Ø, for the coordinate space. 
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/>. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially disjoint’ from another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially intersects’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially touches’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially crosses’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is ‘spatially within’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially contains’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially overlaps' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is spatially related to another <see cref="T:SharpMap.Geometries.Geometry"/>, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.Geometry"/> to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is 'spatially equal' to anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Geometry.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Geometry.GetHashCode"/>.</returns>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.SpatialReference">
            <summary>
            Gets or sets the spatial reference system associated with the <see cref="T:SharpMap.Geometries.Geometry"/>.
            A <see cref="T:SharpMap.Geometries.Geometry"/> may not have had a spatial reference system defined for
            it, in which case *spatialRef will be NULL.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.Dimension">
            <summary>
             The inherent dimension of this <see cref="T:SharpMap.Geometries.Geometry"/> object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension. This specification is restricted to geometries in two-dimensional coordinate
             space.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.IProvider">
            <summary>
            Interface for data providers
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Gets the features within the specified <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:SharpMap.Geometries.BoundingBox"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns all objects whose <see cref="T:SharpMap.Geometries.BoundingBox"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplifed by their <see cref="T:SharpMap.Geometries.BoundingBox"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetFeature(System.UInt32)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on a RowID
            </summary>
            <param name="RowID"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetExtents">
            <summary>
            <see cref="T:SharpMap.Geometries.BoundingBox"/> of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            <para>The ConnectionID should be unique to the datasource (for instance the filename or the
            connectionstring), and is meant to be used for connection pooling.</para>
            <para>If connection pooling doesn't apply to this datasource, the ConnectionID should return String.Empty</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.TransformType">
            <summary>
            Semantic type of transform used in coordinate transformation.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.TransformType.Other">
            <summary>
            Unknown or unspecified type of transform.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.TransformType.Conversion">
            <summary>
            Transform depends only on defined parameters. For example, a cartographic projection.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.TransformType.Transformation">
            <summary>
            Transform depends only on empirically derived parameters. For example a datum transformation.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.TransformType.ConversionAndTransformation">
            <summary>
            Transform depends on both defined and empirical parameters.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.DatumTransform">
            <summary>
            Transformation for applying 
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.MathTransform">
            <summary>
            Abstract class for creating multi-dimensional coordinate points transformations.
            </summary>
            <remarks>
            If a client application wishes to query the source and target coordinate 
            systems of a transformation, then it should keep hold of the 
            <see cref="T:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation"/> interface, and use the contained 
            math transform object whenever it wishes to perform a transform.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.IMathTransform">
            <summary>
            Transforms muti-dimensional coordinate points.
            </summary>
            <remarks>
            If a client application wishes to query the source and target coordinate 
            systems of a transformation, then it should keep hold of the 
            <see cref="T:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation"/> interface, and use the contained 
            math transform object whenever it wishes to perform a transform.
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.Identity">
            <summary>
            Tests whether this transform does not move any points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.Derivative(SharpMap.Geometries.Point)">
            <summary>
            Gets the derivative of this transform at a point. If the transform does 
            not have a well-defined derivative at the point, then this function should 
            fail in the usual way for the DCP. The derivative is the matrix of the 
            non-translating portion of the approximate affine map at the point. The
            matrix will have dimensions corresponding to the source and target 
            coordinate systems. If the input dimension is M, and the output dimension 
            is N, then the matrix will have size [M][N]. The elements of the matrix 
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is 
            parallel to the displacement caused by a small change in the m'th ordinate 
            in the input space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.GetCodomainConvexHull(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets transformed convex hull.
            </summary>
            <remarks>
            <para>The supplied ordinates are interpreted as a sequence of points, which generates a convex
            hull in the source space. The returned sequence of ordinates represents a convex hull in the 
            output space. The number of output points will often be different from the number of input 
            points. Each of the input points should be inside the valid domain (this can be checked by 
            testing the points' domain flags individually). However, the convex hull of the input points
            may go outside the valid domain. The returned convex hull should contain the transformed image
            of the intersection of the source convex hull and the source domain.</para>
            <para>A convex hull is a shape in a coordinate system, where if two positions A and B are 
            inside the shape, then all positions in the straight line between A and B are also inside 
            the shape. So in 3D a cube and a sphere are both convex hulls. Other less obvious examples 
            of convex hulls are straight lines, and single points. (A single point is a convex hull, 
            because the positions A and B must both be the same - i.e. the point itself. So the straight
            line between A and B has zero length.)</para>
            <para>Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.</para>
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.GetDomainFlags(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
             The supplied ordinates are interpreted as a sequence of points, which 
            generates a convex hull in the source space. Conceptually, each of the 
            (usually infinite) points inside the convex hull is then tested against
            the source domain. The flags of all these tests are then combined. In 
            practice, implementations of different transforms will use different 
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.Transform(SharpMap.Geometries.Point)">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.TransformList(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.IMathTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.IMathTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.IMathTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.IMathTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.MathTransform.R2D">
            <summary>
            R2D
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.MathTransform.D2R">
            <summary>
            D2R
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Identity">
            <summary>
            Tests whether this transform does not move any points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Derivative(SharpMap.Geometries.Point)">
            <summary>
            Gets the derivative of this transform at a point. If the transform does 
            not have a well-defined derivative at the point, then this function should 
            fail in the usual way for the DCP. The derivative is the matrix of the 
            non-translating portion of the approximate affine map at the point. The
            matrix will have dimensions corresponding to the source and target 
            coordinate systems. If the input dimension is M, and the output dimension 
            is N, then the matrix will have size [M][N]. The elements of the matrix 
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is 
            parallel to the displacement caused by a small change in the m'th ordinate 
            in the input space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.GetCodomainConvexHull(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets transformed convex hull.
            </summary>
            <remarks>
            <para>The supplied ordinates are interpreted as a sequence of points, which generates a convex
            hull in the source space. The returned sequence of ordinates represents a convex hull in the 
            output space. The number of output points will often be different from the number of input 
            points. Each of the input points should be inside the valid domain (this can be checked by 
            testing the points' domain flags individually). However, the convex hull of the input points
            may go outside the valid domain. The returned convex hull should contain the transformed image
            of the intersection of the source convex hull and the source domain.</para>
            <para>A convex hull is a shape in a coordinate system, where if two positions A and B are 
            inside the shape, then all positions in the straight line between A and B are also inside 
            the shape. So in 3D a cube and a sphere are both convex hulls. Other less obvious examples 
            of convex hulls are straight lines, and single points. (A single point is a convex hull, 
            because the positions A and B must both be the same - i.e. the point itself. So the straight
            line between A and B has zero length.)</para>
            <para>Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.</para>
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.GetDomainFlags(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which 
            generates a convex hull in the source space. Conceptually, each of the 
            (usually infinite) points inside the convex hull is then tested against
            the source domain. The flags of all these tests are then combined. In 
            practice, implementations of different transforms will use different 
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Transform(SharpMap.Geometries.Point)">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.TransformList(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Degrees2Radians(System.Double)">
            <summary>
            To convert degrees to radians, multiply degrees by pi/180. 
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.MathTransform.Radians2Degrees(System.Double)">
            <summary>
            
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.MathTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.MathTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.MathTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.MathTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projections.MapProjection">
            <summary>
            Projections inherit from this abstract class to get access to useful mathematical functions.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IProjection">
            <summary>
            The IProjection interface defines the standard information stored with projection
            objects. A projection object implements a coordinate transformation from a geographic
            coordinate system to a projected coordinate system, given the ellipsoid for the
            geographic coordinate system. It is expected that each coordinate transformation of
            interest, e.g., Transverse Mercator, Lambert, will be implemented as a COM class of
            coType Projection, supporting the IProjection interface.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IInfo">
            <summary>
            The ISpatialReferenceInfo interface defines the standard 
            information stored with spatial reference objects. This
            interface is reused for many of the spatial reference
            objects in the system.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IInfo.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., “POSC”,
            is this is a standard object with an authority specific
            identity code. Returns “CUSTOM” if this is a custom object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.WKT">
            <summary>
            Returns the Well-known text for this spatial reference object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IInfo.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IProjection.GetParameter(System.Int32)">
            <summary>
            Gets an indexed parameter of the projection.
            </summary>
            <param name="n">Index of parameter</param>
            <returns>n'th parameter</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IProjection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IProjection.NumParameters">
            <summary>
            Gets number of parameters of the projection.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IProjection.ClassName">
            <summary>
            Gets the projection classification name (e.g. 'Transverse_Mercator').
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.PI">
            <summary>
            PI
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.HALF_PI">
            <summary>
            Half of PI
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.TWO_PI">
            <summary>
            PI * 2
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.EPSLN">
            <summary>
            EPSLN
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.S2R">
            <summary>
            S2R
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.MAX_VAL">
            <summary>
            MAX_VAL
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.prjMAXLONG">
            <summary>
            prjMAXLONG
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Projections.MapProjection.DBLLONG">
            <summary>
            DBLLONG
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.CUBE(System.Double)">
            <summary>
            Returns the cube of a number.
            </summary>
            <param name="x"> </param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.QUAD(System.Double)">
            <summary>
            Returns the quad of a number.
            </summary>
            <param name="x"> </param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.GMAX(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.GMIN(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.IMOD(System.Double,System.Double)">
            <summary>
            IMOD
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.sign(System.Double)">
            <summary>
            Function to return the sign of an argument
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.adjust_lon(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.msfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small m which is the radius of
            a parallel of latitude, phi, divided by the semimajor axis.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.qsfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute constant small q which is the radius of a 
            parallel of latitude, phi, divided by the semimajor axis. 
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.sincos(System.Double,System.Double@,System.Double@)">
            <summary>
            Function to calculate the sine and cosine in one call.  Some computer
            systems have implemented this function, resulting in a faster implementation
            than calling each function separately.  It is provided here for those
            computer systems which don`t implement this function
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.tsfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small t for use in the forward
            computations in the Lambert Conformal Conic and the Polar
            Stereographic projections.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.phi1z(System.Double,System.Double,System.Int64@)">
            <summary>
            
            
            </summary>
            <param name="eccent"></param>
            <param name="qs"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.asinz(System.Double)">
            <summary>
            Function to eliminate roundoff errors in asin
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.phi2z(System.Double,System.Double,System.Int64@)">
            <summary>Function to compute the latitude angle, phi2, for the inverse of the
              Lambert Conformal Conic and Polar Stereographic projections.
              </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.e0fn(System.Double)">
            <summary>
            Functions to compute the constants e0, e1, e2, and e3 which are used
            in a series for calculating the distance along a meridian.  The
            input x represents the eccentricity squared.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.e1fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.e2fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.e3fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.e4fn(System.Double)">
            <summary>
            Function to compute the constant e4 from the input of the eccentricity
            of the spheroid, x.  This constant is used in the Polar Stereographic
            projection.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.mlfn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function computes the value of M which is the distance along a meridian
            from the Equator to latitude phi.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.calc_utm_zone(System.Double)">
            <summary>
            Function to calculate UTM zone number--NOTE Longitude entered in DEGREES!!!
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.LongitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a longitude value in degrees to radians.
            </summary>
            <param name="x">The value in degrees to convert to radians.</param>
            <param name="edge">If true, -180 and +180 are valid, otherwise they are considered out of range.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.MapProjection.LatitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a latitude value in degrees to radians.
            </summary>
            <param name="y">The value in degrees to to radians.</param>
            <param name="edge">If true, -90 and +90 are valid, otherwise they are considered out of range.</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "EPSG",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projections.MapProjection.IsInverse">
            <summary>
            Returns true if this projection is inverted.
            Most map projections define forward projection as "from geographic to projection", and backwards
            as "from projection to geographic". If this projection is inverted, this will be the other way around.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IGeographicTransform">
            <summary>
            The IGeographicTransform interface is implemented on geographic transformation
            objects and implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IGeographicTransform.Forward(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms an array of points from the source geographic coordinate system
            to the target geographic coordinate system.
            </summary>
            <param name="point">Points in the source geographic coordinate system</param>
            <returns>Points in the target geographic coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IGeographicTransform.Inverse(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms an array of points from the target geographic coordinate system
            to the source geographic coordinate system.
            </summary>
            <param name="point">Points in the target geographic coordinate system</param>
            <returns>Points in the source geographic coordinate system</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicTransform.SourceGCS">
            <summary>
            Gets or sets source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicTransform.ParameterInfo">
            <summary>
            Returns an accessor interface to the parameters for this geographic transformation.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IGeodeticSpatialReference">
            <summary>
            The IGeodeticSpatialReference interface defines a root interface for all types of geodetic
            spatial references, it is a subclass of ICoordinateSystem.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ICoordinateSystem">
            <summary>
            Base interface for all coordinate systems
            </summary>
            <remarks>
            <para>A coordinate system is a mathematical space, where the elements of the space are called
            positions. Each position is described by a list of numbers. The length of the list corresponds
            to the dimension of the coordinate system. So in a 2D coordinate system each position is 
            described by a list containing 2 numbers.</para>
            <para>
            However, in a coordinate system, not all lists of numbers correspond to a position - 
            some lists may be outside the domain of the coordinate system. For example, in a 2D Lat/Lon
            coordinate system, the list (91,91) does not correspond to a position.</para>
            <para>
            Some coordinate systems also have a mapping from the mathematical space into locations
            in the real world. So in a Lat/Lon coordinate system, the mathematical position (lat, long) 
            corresponds to a location on the surface of the Earth. This mapping from the mathematical 
            space into real-world locations is called a Datum.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Gets axis details for dimension within coordinate system.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Axis info</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICoordinateSystem.Dimension">
            <summary>
            Dimension of the coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICoordinateSystem.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Gets default envelope of coordinate system. Coordinate systems 
            which are bounded should return the minimum bounding box of their 
            domain. Unbounded coordinate systems should return a box which is 
            as large as is likely to be used. For example, a (lon,lat) 
            geographic coordinate system in degrees should return a box from 
            (-180,-90) to (180,90), and a geocentric coordinate system could 
            return a box from (-r,-r,-r) to (+r,+r,+r) where r is the 
            approximate radius of the Earth.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory">
            <summary>
            Creates spatial reference objects using codes.
            </summary>
            <remarks>
             The codes are maintained by an external authority. A commonly used authority is EPSG, which is also used in the GeoTIFF standard and in SharpMap.
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateProjectedCoordinateSystem(System.Int64)">
            <summary>
            Returns a projected coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The projected coordinate system object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateGeographicCoordinateSystem(System.Int64)">
            <summary>
            Returns a geographic coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The geographic coordinate system object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalDatum(System.Int64)">
            <summary>
            Returns a horizontal datum object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The horizontal datum object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateEllipsoid(System.Int64)">
            <summary>
            Returns an ellipsoid object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The ellipsoid object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreatePrimeMeridian(System.Int64)">
            <summary>
            Returns a prime meridian object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The prime meridian object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateLinearUnit(System.Int64)">
            <summary>
            Returns a linear unit object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The linear unit object with the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateAngularUnit(System.Int64)">
            <summary>
            Returns an <see cref="T:SharpMap.CoordinateSystems.IAngularUnit">angular unit</see> object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The angular unit object for the given code.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalDatum(System.Int64)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IVerticalDatum"/> from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns>Vertical datum for the given code</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalCoordinateSystem(System.Int64)">
            <summary>
            Create a <see cref="T:SharpMap.CoordinateSystems.IVerticalCoordinateSystem">vertical coordinate system</see> from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateCompoundCoordinateSystem(System.Int64)">
            <summary>
            Creates a 3D coordinate system from a code.
            </summary>
            <param name="code">Authority code</param>
            <returns>Compound coordinate system for the given code</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalCoordinateSystem(System.Int64)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IHorizontalCoordinateSystem">horizontal co-ordinate system</see> from a code.
            The horizontal coordinate system could be geographic or projected.
            </summary>
            <param name="code">Authority code</param>
            <returns>Horizontal coordinate system for the given code</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.GeoidFromWktName(System.String)">
            <summary>
            Gets the Geoid code from a WKT name.
            </summary>
            <remarks>
             In the OGC definition of WKT horizontal datums, the geoid is referenced 
            by a quoted string, which is used as a key value. This method converts 
            the key value string into a code recognized by this authority.
            </remarks>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.WktGeoidName(System.String)">
            <summary>
            Gets the WKT name of a Geoid.
            </summary>
            <remarks>
             In the OGC definition of WKT horizontal datums, the geoid is referenced by 
            a quoted string, which is used as a key value. This method gets the OGC WKT 
            key value from a geoid code.
            </remarks>
            <param name="geoid"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.Authority">
            <summary>
            Returns the authority name for this factory (e.g., "EPSG" or "POSC").
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory.DescriptionText">
            <summary>
            Gets a description of the object corresponding to a code.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Datum">
            <summary>
            A set of quantities from which other quantities are calculated.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the earth 
            that have coordinates. EG. A datum can be thought of as a set of parameters 
            defining completely the origin and orientation of a coordinate system with respect 
            to the earth. A textual description and/or a set of parameters describing the 
            relationship of a coordinate system to some predefined physical locations (such 
            as center of mass) and physical directions (such as axis of spin). The definition 
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Info">
            <summary>
            The Info object defines the standard information
            stored with spatial reference objects
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Info.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            A base interface for metadata applicable to coordinate system objects.
            </summary>
            <remarks>
            <para>The metadata items ‘Abbreviation’, ‘Alias’, ‘Authority’, ‘AuthorityCode’, ‘Name’ and ‘Remarks’ 
            were specified in the Simple Features interfaces, so they have been kept here.</para>
            <para>This specification does not dictate what the contents of these items 
            should be. However, the following guidelines are suggested:</para>
            <para>When <see cref="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory"/> is used to create an object, the ‘Authority’
            and 'AuthorityCode' values should be set to the authority name of the factory object, and the authority 
            code supplied by the client, respectively. The other values may or may not be set. (If the authority is 
            EPSG, the implementer may consider using the corresponding metadata values in the EPSG tables.)</para>
            <para>When <see cref="T:SharpMap.CoordinateSystems.CoordinateSystemFactory"/> creates an object, the 'Name' should be set to the value
            supplied by the client. All of the other metadata items should be left empty</para>
            </remarks>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Info.ToString">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Info.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "EPSG",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Info.InfoXml">
            <summary>
            Returns an XML string of the info object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IDatum">
            <summary>
            A set of quantities from which other quantities are calculated.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the earth 
            that have coordinates. EG. A datum can be thought of as a set of parameters 
            defining completely the origin and orientation of a coordinate system with respect 
            to the earth. A textual description and/or a set of parameters describing the 
            relationship of a coordinate system to some predefined physical locations (such 
            as center of mass) and physical directions (such as axis of spin). The definition 
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IDatum.DatumType">
            <summary>
            Gets or sets the type of the datum as an enumerated code.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Datum.#ctor(SharpMap.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a Datum object
            </summary>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Datum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Datum.DatumType">
            <summary>
            Gets or sets the type of the datum as an enumerated code.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryToWKB">
            <summary>
            Converts a <see cref="T:SharpMap.Geometries.Geometry"/> instance to a Well-known Binary string representation.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:SharpMap.Geometries.Geometry"/> value as a contiguous stream of bytes. It permits <see cref="T:SharpMap.Geometries.Geometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> is obtained by serializing a <see cref="T:SharpMap.Geometries.Geometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(SharpMap.Geometries.Geometry)">
            <summary>
            Writes a geometry to a byte array using little endian byte encoding
            </summary>
            <param name="g">The geometry to write</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(SharpMap.Geometries.Geometry,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometry to a byte array using the specified encoding.
            </summary>
            <param name="g">The geometry to write</param>
            <param name="wkbByteOrder">Byte order</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteType(SharpMap.Geometries.Geometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the type number for this geometry.
            </summary>
            <param name="geometry">The geometry to determine the type of.</param>
            <param name="bWriter">Binary Writer</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometry(SharpMap.Geometries.Geometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the geometry to the binary writer.
            </summary>
            <param name="geometry">The geometry to be written.</param>
            <param name="bWriter"></param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePoint(SharpMap.Geometries.Point,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a point.
            </summary>
            <param name="point">The point to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteLineString(SharpMap.Geometries.LineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a linestring.
            </summary>
            <param name="ls">The linestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePolygon(SharpMap.Geometries.Polygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a polygon.
            </summary>
            <param name="poly">The polygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPoint(SharpMap.Geometries.MultiPoint,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipoint.
            </summary>
            <param name="mp">The multipoint to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiLineString(SharpMap.Geometries.MultiLineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multilinestring.
            </summary>
            <param name="mls">The multilinestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPolygon(SharpMap.Geometries.MultiPolygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipolygon.
            </summary>
            <param name="mp">The mulitpolygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometryCollection(SharpMap.Geometries.GeometryCollection,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometrycollection.
            </summary>
            <param name="gc">The geometrycollection to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteUInt32(System.UInt32,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes an unsigned integer to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteDouble(System.Double,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a double to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="T:SharpMap.Utilities.LeastSquaresTransform">
            <summary>
            Calculates Affine and Helmert transformation using Least-Squares Regression of input and output points
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.#ctor">
            <summary>
            Initialize Least Squares transformations
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.AddInputOutputPoint(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Adds an input and output value pair to the collection
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.RemoveInputOutputPointAt(System.Int32)">
            <summary>
            Removes input and output value pair at the specified index
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetInputPoint(System.Int32)">
            <summary>
            Gets the input point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Input point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetInputPointAt(SharpMap.Geometries.Point,System.Int32)">
            <summary>
            Sets the input point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetOutputPoint(System.Int32)">
            <summary>
            Gets the output point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Output point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetOutputPointAt(SharpMap.Geometries.Point,System.Int32)">
            <summary>
            Sets the output point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetAffineTransformation">
            <summary>
            Return an array with the six affine transformation parameters {a,b,c,d,e,f} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2. c,f defines offset.
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = d*X + e*Y + f
            </para>
            <para>
            Transformation based on Mikhail "Introduction to Modern Photogrammetry" p. 399-300.
            Extended to arbitrary number of measurements by M. Nielsen
            </para>
            </remarks>
            <returns>Array with the six transformation parameters and sum of squared residuals:  a,b,c,d,e,f,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetHelmertTransformation">
            <summary>
            Calculates the four helmert transformation parameters {a,b,c,d} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            <para>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2.
            c,f defines offset.
            </para>
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = -b*X + a*Y + d
            </para>
            <para>This is a transformation initially based on the affine transformation but slightly simpler.</para>
            </remarks>
            <returns>Array with the four transformation parameters, and sum of squared residuals: a,b,c,d,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates an n x m matrix of doubles
            </summary>
            <param name="n">width of matrix</param>
            <param name="m">height of matrix</param>
            <returns>n*m matrix</returns>
        </member>
        <member name="T:SharpMap.Map">
            <summary>
            Map class
            </summary>
            <example>
            Creating a new map instance, adding layers and rendering the map:
            <code lang="C#">
            SharpMap.Map myMap = new SharpMap.Map(picMap.Size);
            myMap.MinimumZoom = 100;
            myMap.BackgroundColor = Color.White;
            
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = "Server=127.0.0.1;Port=5432;User Id=postgres;Password=password;Database=myGisDb;";
            myLayer.DataSource = new SharpMap.Data.Providers.PostGIS(ConnStr, "myTable", "the_geom", 32632);
            myLayer.FillStyle = new SolidBrush(Color.FromArgb(240,240,240)); //Applies to polygon types only
            myLayer.OutlineStyle = new Pen(Color.Blue, 1); //Applies to polygon and linetypes only
            //Setup linestyle (applies to line types only)
            myLayer.Style.Line.Width = 2;
            myLayer.Style.Line.Color = Color.Black;
            myLayer.Style.Line.EndCap = System.Drawing.Drawing2D.LineCap.Round; //Round end
            myLayer.Style.Line.StartCap = layRailroad.LineStyle.EndCap; //Round start
            myLayer.Style.Line.DashPattern = new float[] { 4.0f, 2.0f }; //Dashed linestyle
            myLayer.Style.EnableOutline = true;
            myLayer.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; //Render smooth lines
            myLayer.MaxVisible = 40000;
            
            myMap.Layers.Add(myLayer);
            // [add more layers...]
            
            myMap.Center = new SharpMap.Geometries.Point(725000, 6180000); //Set center of map
            myMap.Zoom = 1200; //Set zoom level
            myMap.Size = new System.Drawing.Size(300,200); //Set output size
            
            System.Drawing.Image imgMap = myMap.GetMap(); //Renders the map
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Map.numberFormat_EnUS">
            <summary>
            Used for converting numbers to/from strings
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor">
            <summary>
            Initializes a new map
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new map
            </summary>
            <param name="size">Size of map in pixels</param>
        </member>
        <member name="M:SharpMap.Map.Dispose">
            <summary>
            Disposes the map object
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetMap">
            <summary>
            Renders the map to an image
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Map.FindLayer(System.String)">
            <summary>
            Returns an enumerable for all layers containing the search parameter in the LayerName property
            </summary>
            <param name="layername">Search parameter</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:SharpMap.Map.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Map.ZoomToExtents">
            <summary>
            Zooms to the extents of all layers
            </summary>
        </member>
        <member name="M:SharpMap.Map.ZoomToBox(SharpMap.Geometries.BoundingBox)">
            <summary>
            Zooms the map to fit a bounding box
            </summary>
            <remarks>
            NOTE: If the aspect ratio of the box and the aspect ratio of the mapsize
            isn't the same, the resulting map-envelope will be adjusted so that it contains
            the bounding box, thus making the resulting envelope larger!
            </remarks>
            <param name="bbox"></param>
        </member>
        <member name="M:SharpMap.Map.WorldToImage(SharpMap.Geometries.Point)">
            <summary>
            Converts a point from world coordinates to image coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in world coordinates</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.ImageToWorld(System.Drawing.PointF)">
            <summary>
            Converts a point from image coordinates to world coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in image coordinates</param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.GetExtents">
            <summary>
            Gets the extents of the map based on the extents of all the layers in the layers collection
            </summary>
            <returns>Full map extents</returns>
        </member>
        <member name="E:SharpMap.Map.LayersChanged">
            <summary>
            Event fired when the maps layer list have been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapViewOnChange">
            <summary>
            Event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendered">
            <summary>
            Event fired when all layers have been rendered
            </summary>
        </member>
        <member name="P:SharpMap.Map.Envelope">
            <summary>
            Gets the extents of the current map based on the current zoom, center and mapsize
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapTransform">
            <summary>
            Using the <see cref="P:SharpMap.Map.MapTransform"/> you can alter the coordinate system of the map rendering.
            This makes it possible to rotate or rescale the image, for instance to have another direction than north upwards.
            </summary>
            <example>
            Rotate the map output 45 degrees around its center:
            <code lang="C#">
            System.Drawing.Drawing2D.Matrix maptransform = new System.Drawing.Drawing2D.Matrix(); //Create transformation matrix
            maptransform.RotateAt(45,new PointF(myMap.Size.Width/2,myMap.Size.Height/2)); //Apply 45 degrees rotation around the center of the map
            myMap.MapTransform = maptransform; //Apply transformation to map
            </code>
            </example>
        </member>
        <member name="P:SharpMap.Map.Layers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackColor">
            <summary>
            Map background color (defaults to transparent)
            </summary>
        </member>
        <member name="P:SharpMap.Map.Center">
            <summary>
            Center of map in WCS
            </summary>
        </member>
        <member name="P:SharpMap.Map.Zoom">
            <summary>
            Gets or sets the zoom level of map.
            </summary>
            <remarks>
            <para>The zoom level corresponds to the width of the map in WCS units.</para>
            <para>A zoomlevel of 0 will result in an empty map being rendered, but will not throw an exception</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Map.PixelSize">
            <summary>
            Returns the size of a pixel in world coordinate units
            </summary>
        </member>
        <member name="P:SharpMap.Map.PixelWidth">
            <summary>
            Returns the width of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/>.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelHeight">
            <summary>
            Returns the height of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/> unless <see cref="P:SharpMap.Map.PixelAspectRatio"/> is different from 1.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelAspectRatio">
            <summary>
            Gets or sets the aspect-ratio of the pixel scales. A value less than 
            1 will make the map streach upwards, and larger than 1 will make it smaller.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an argument exception when value is 0 or less.</exception>
        </member>
        <member name="P:SharpMap.Map.MapHeight">
            <summary>
            Height of map in world units
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Map.Size">
            <summary>
            Size of output map
            </summary>
        </member>
        <member name="P:SharpMap.Map.MinimumZoom">
            <summary>
            Minimum zoom amount allowed
            </summary>
        </member>
        <member name="P:SharpMap.Map.MaximumZoom">
            <summary>
            Maximum zoom amount allowed
            </summary>
        </member>
        <member name="T:SharpMap.Map.LayersChangedEventHandler">
            <summary>
            EventHandler for event fired when the maps layer list has been changed
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapViewChangedHandler">
            <summary>
            EventHandler for event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderedEventHandler">
            <summary>
            EventHandler for event fired when all layers have been rendered
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.MsSql">
            <summary>
            Microsoft SQL data provider
            </summary>
            <remarks>
            <para>
            The SQL data table MUST contain five data columns: A binary or image column (a Geometry Column) for storing WKB formatted geometries, 
            and four real values holding the boundingbox of the geometry. These must be named: Envelope_MinX, Envelope_MinY, Envelope_MaxX and Envelope_MaxY.
            Any extra columns will be returns as feature data.
            </para>
            <para>For creating a valid MS SQL datatable for SharpMap, see <see cref="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)"/> 
            for creating and uploading a datasource to MS SQL Server.</para>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            myLayer.DataSource = new SharpMap.Data.Providers.MsSql(ConnStr, "myTable");
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MS Sql Server
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
            /// <param name="OID_ColumnName">Name of column with unique identifier</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the features that intersects with 'geom' [NOT IMPLEMENTED]
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="RowID"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)">
            <summary>
            Creates a new table in a Microsoft SQL Server database and copies rows from an existing datasource.
            </summary>
            <remarks>
            <para>The datatable created will contain six extra columns besides the attribute data: "OID" (Object ID row), 
            "WKB_Geometry" (Geometry stored as WKB), and Envelope_MinX, Envelope_MinY, Envelope_MaxX, Envelope_MaxY
            for geometry bounding box.</para>
            <para>
            <example>
            Upload a ShapeFile to a database:
            <code>
            public void CreateDatabase(string shapeFile)
            {
            	if (!System.IO.File.Exists(shapeFile))
            	{
            		MessageBox.Show("File not found");
            		return;
            	}
            	ShapeFile shp = new ShapeFile(shapeFile, false);
            	//Create tablename from filename
            	string tablename = shapeFile.Substring(shapeFile.LastIndexOf('\\') + 1,
            		shapeFile.LastIndexOf('.') - shapeFile.LastIndexOf('\\') - 1);
            	//Create connectionstring
            	string connstr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            	int count = SharpMap.Data.Providers.MsSql.CreateDataTable(shp, tablename, connstr);
            	MessageBox.Show("Uploaded " + count.ToString() + " features to datatable '" + tablename + "'");
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="datasource">Datasource to upload</param>
            <param name="tablename">Name of table to create (existing table will be overwritten!)</param>
            <param name="connstr">Connection string to database</param>
            <returns>Number or rows inserted, -1 if failed and 0 if table created but no rows inserted.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Type2SqlType(System.Type)">
            <summary>
            Returns the name of the SqlServer datatype based on a .NET datatype
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.GeometryColumn">
            <summary>
            Name of geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.SRID">
            <summary>
            Spacial Reference ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.ConcatenatedTransform.Inverse">
            <summary>
            Returns the inverse of this conversion.
            </summary>
            <returns>IMathTransform that is the reverse of the current conversion.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.ConcatenatedTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ILinearUnit">
            <summary>
            The ILinearUnit interface defines methods on linear units.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IUnit">
            <summary>
            The IUnit interface abstracts different kinds of units, it has no methods.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ILinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per <see cref="T:SharpMap.CoordinateSystems.ILinearUnit"/>.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.HorizontalDatum">
            <summary>
            Horizontal datum defining the standard datum information.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IHorizontalDatum">
            <summary>
            Procedure used to measure positions on the surface of the Earth.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IHorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IHorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84. The 7 returned values 
            correspond to (dx,dy,dz) in meters, (ex,ey,ez) in arc-seconds, and scaling in parts-per-million.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.HorizontalDatum.#ctor(SharpMap.CoordinateSystems.IEllipsoid,SharpMap.CoordinateSystems.Wgs84ConversionInfo,SharpMap.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a horizontal datum
            </summary>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Parameters for a Bursa Wolf transformation into WGS84</param>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.HorizontalDatum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.WGS84">
            <summary>
            EPSG's WGS 84 datum has been the then current realisation. No distinction is made between the original WGS 84 
            frame, WGS 84 (G730), WGS 84 (G873) and WGS 84 (G1150). Since 1997, WGS 84 has been maintained within 10cm of 
            the then current ITRF.
            </summary>
            <remarks>
            <para>Area of use: World</para>
            <para>Origin description: Defined through a consistent set of station coordinates. These have changed with time: by 0.7m 
            on 29/6/1994 [WGS 84 (G730)], a further 0.2m on 29/1/1997 [WGS 84 (G873)] and a further 0.06m on 
            20/1/2002 [WGS 84 (G1150)].</para>
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.WGS72">
            <summary>
            World Geodetic System 1972
            </summary>
            <remarks>
            <para>Used by GPS before 1987. For Transit satellite positioning see also WGS 72BE. Datum code 6323 reserved for southern hemisphere ProjCS's.</para>
            <para>Area of use: World</para>
            <para>Origin description: Developed from a worldwide distribution of terrestrial and
            geodetic satellite observations and defined through a set of station coordinates.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.ETRF89">
            <summary>
            European Terrestrial Reference System 1989
            </summary>
            <remarks>
            <para>Area of use: 
            Europe: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; 
            Cyprus; Czech Republic; Denmark; Estonia; Finland; Faroe Islands; France; Germany; Greece; 
            Hungary; Ireland; Italy; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Netherlands; 
            Norway; Poland; Portugal; Romania; San Marino; Serbia and Montenegro; Slovakia; Slovenia; 
            Spain; Svalbard; Sweden; Switzerland; United Kingdom (UK) including Channel Islands and 
            Isle of Man; Vatican City State.</para>
            <para>Origin description: Fixed to the stable part of the Eurasian continental 
            plate and consistent with ITRS at the epoch 1989.0.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.ED50">
            <summary>
            European Datum 1950
            </summary>
            <remarks>
            <para>Area of use:
            Europe - west - Denmark; Faroe Islands; France offshore; Israel offshore; Italy including San 
            Marino and Vatican City State; Ireland offshore; Netherlands offshore; Germany; Greece (offshore);
            North Sea; Norway; Spain; Svalbard; Turkey; United Kingdom UKCS offshore. Egypt - Western Desert.
            </para>
            <para>Origin description: Fundamental point: Potsdam (Helmert Tower). 
            Latitude: 52 deg 22 min 51.4456 sec N; Longitude: 13 deg  3 min 58.9283 sec E (of Greenwich).</para>
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalDatum.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.HorizontalCoordinateSystem">
            <summary>
            A 2D coordinate system suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.CoordinateSystem">
            <summary>
            Base interface for all coordinate systems.
            </summary>
            <remarks>
            <para>A coordinate system is a mathematical space, where the elements of the space
            are called positions. Each position is described by a list of numbers. The length 
            of the list corresponds to the dimension of the coordinate system. So in a 2D 
            coordinate system each position is described by a list containing 2 numbers.</para>
            <para>However, in a coordinate system, not all lists of numbers correspond to a 
            position - some lists may be outside the domain of the coordinate system. For 
            example, in a 2D Lat/Lon coordinate system, the list (91,91) does not correspond
            to a position.</para>
            <para>Some coordinate systems also have a mapping from the mathematical space into 
            locations in the real world. So in a Lat/Lon coordinate system, the mathematical 
            position (lat, long) corresponds to a location on the surface of the Earth. This 
            mapping from the mathematical space into real-world locations is called a Datum.</para>
            </remarks>		
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystem.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a coordinate system.
            </summary>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets the units for the dimension within coordinate system. 
            Each dimension in the coordinate system has corresponding units.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Gets axis details for dimension within coordinate system.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Axis info</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.CoordinateSystem.Dimension">
            <summary>
            Dimension of the coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.CoordinateSystem.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Coordinate systems which are bounded should return the minimum bounding box of their domain. 
            Unbounded coordinate systems should return a box which is as large as is likely to be used. 
            For example, a (lon,lat) geographic coordinate system in degrees should return a box from 
            (-180,-90) to (180,90), and a geocentric coordinate system could return a box from (-r,-r,-r)
            to (+r,+r,+r) where r is the approximate radius of the Earth.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IHorizontalCoordinateSystem">
            <summary>
            A 2D coordinate system suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IHorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.HorizontalCoordinateSystem.#ctor(SharpMap.CoordinateSystems.IHorizontalDatum,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of HorizontalCoordinateSystem
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="axisInfo">Axis information</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.HorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.IO.StreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style
            </summary>
            <remarks>
            This is a crude c# implementation of Java's <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number. 
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token. 
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadAuthority(System.String@,System.Int64@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:SharpMap.Geometries.ISpatialReference">
            <summary>
            The ISpatialRelation interface defines a set of named spatial relationship operators for geometric shape
            objects. The behavior of these operators is described in detail in the geometry object model sub-section of
            the Architecture section of the OpenGIS Simple Features specification. [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.GeometryTransform">
            <summary>
            Helper class for transforming <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformBox(SharpMap.Geometries.BoundingBox,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            </summary>
            <param name="box">BoundingBox to transform</param>
            <param name="transform">Math Transform</param>
            <returns>Transformed object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(SharpMap.Geometries.Geometry,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="g">Geometry to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Geometry</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformPoint(SharpMap.Geometries.Point,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Point"/>.
            </summary>
            <param name="p">Point to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Point</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformLineString(SharpMap.Geometries.LineString,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.LineString"/>.
            </summary>
            <param name="l">LineString to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed LineString</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformLinearRing(SharpMap.Geometries.LinearRing,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.LinearRing"/>.
            </summary>
            <param name="r">LinearRing to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed LinearRing</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformPolygon(SharpMap.Geometries.Polygon,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Polygon"/>.
            </summary>
            <param name="p">Polygon to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Polygon</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPoint(SharpMap.Geometries.MultiPoint,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiPoint"/>.
            </summary>
            <param name="points">MultiPoint to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiPoint</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformMultiLineString(SharpMap.Geometries.MultiLineString,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiLineString"/>.
            </summary>
            <param name="lines">MultiLineString to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiLineString</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPolygon(SharpMap.Geometries.MultiPolygon,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiPolygon"/>.
            </summary>
            <param name="polys">MultiPolygon to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiPolygon</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeometryTransform.TransformGeometryCollection(SharpMap.Geometries.GeometryCollection,SharpMap.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.GeometryCollection"/>.
            </summary>
            <param name="geoms">GeometryCollection to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed GeometryCollection</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP">
            <summary>
            Implemetns the Lambert Conformal Conic 2SP Projection.
            </summary>
            <remarks>
            <para>The Lambert Conformal Conic projection is a standard projection for presenting maps
            of land areas whose East-West extent is large compared with their North-South extent.
            This projection is "conformal" in the sense that lines of latitude and longitude, 
            which are perpendicular to one another on the earth's surface, are also perpendicular
            to one another in the projected domain.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an LambertConformalConic2SPProjection projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Parameter</term><description>Description</description></listheader>
            <item><term>latitude_of_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>central_meridian</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP.DegreesToMeters(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP.MetersToDegrees(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.LambertConformalConic2SP.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IVerticalDatum">
            <summary>
            Procedure used to measure vertical distances.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VectorLayer">
            <summary>
            Class for vector layer properties
            </summary>
            <example>
            Adding a VectorLayer to a map:
            <code lang="C#">
            //Initialize a new map
            SharpMap.Map myMap = new SharpMap.Map(new System.Drawing.Size(300,600));
            //Create a layer
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            //Add datasource
            myLayer.DataSource = new SharpMap.Data.Providers.ShapeFile(@"C:\data\MyShapeData.shp");
            //Set up styles
            myLayer.Style.Outline = new Pen(Color.Magenta, 3f);
            myLayer.Style.EnableOutline = true;
            myMap.Layers.Add(myLayer);
            //Zoom to fit the data in the view
            myMap.ZoomToExtents();
            //Render the map:
            System.Drawing.Image mapImage = myMap.GetMap();
            </code>
            </example>
        </member>
        <member name="T:SharpMap.Layers.Layer">
            <summary>
            Abstract class for common layer properties
            Implement this class instead of the ILayer interface to save a lot of common code.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.ILayer">
            <summary>
            Interface for map layers
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ILayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MinVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MaxVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Enabled">
            <summary>
            Specifies whether this layer should be rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LayerName">
            <summary>
            Name of layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToString">
            <summary>
            Returns the name of the layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Clone">
            <summary>
            Clones the layer
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="E:SharpMap.Layers.Layer.LayerRendered">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.CoordinateTransformation">
            <summary>
            Gets or sets the <see cref="T:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation"/> applied 
            to this vectorlayer prior to rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.Layer.MinVisible">
            <summary>
            Minimum visibility zoom, including this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.MaxVisible">
            <summary>
            Maximum visibility zoom, excluding this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Enabled">
            <summary>
            Specified whether the layer is rendered or not
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer.LayerRenderedEventHandler">
            <summary>
            EventHandler for event fired when the layer has been rendered
            </summary>
            <param name="layer">Layer rendered</param>
            <param name="g">Reference to graphics object used for rendering</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String)">
            <summary>
            Initializes a new layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Initializes a new layer with a specified datasource
            </summary>
            <param name="layername">Name of layer</param>
            <param name="dataSource">Data source</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer to a graphics object
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Clone">
            <summary>
            Clones the layer
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.ClippingEnabled">
            <summary>
            Specifies whether polygons should be clipped prior to rendering
            </summary>
            <remarks>
            <para>Clipping will clip <see cref="T:SharpMap.Geometries.Polygon"/> and
            <see cref="T:SharpMap.Geometries.MultiPolygon"/> to the current view prior
            to rendering the object.</para>
            <para>Enabling clipping might improve rendering speed if you are rendering 
            only small portions of very large objects.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Style">
            <summary>
            Gets or sets the rendering style of the vector layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are surfaces. The interiors of any
            two surfaces in a MultiSurface may not intersect. The boundaries of any two elements in a MultiSurface may
            intersect at most at a finite number of points.
            </summary>
            <remarks>
            MultiSurface is a non-instantiable class in this specification, it defines a set of methods for its subclasses and
            is included for reasons of extensibility. The instantiable subclass of MultiSurface is MultiPolygon,
            corresponding to a collection of Polygons.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
            <remarks>
            All the elements in a GeometryCollection must be in the same Spatial Reference. This is also the Spatial
            Reference for the GeometryCollection.<br/>
            GeometryCollection places no other constraints on its elements. Subclasses of GeometryCollection may
            restrict membership based on dimension and may also place other constraints on the degree of spatial overlap
            between elements.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.IGeometryCollection">
            <summary>
            Interface for a GeometryCollection. A GeometryCollection is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometryCollection.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.#ctor">
            <summary>
            Initializes a new GeometryCollection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsEmpty">
            <summary>
            Returns empty of all the geometries are empty or the collection is empty
            </summary>
            <returns>true of collection is empty</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Equals(SharpMap.Geometries.GeometryCollection)">
            <summary>
            Determines whether this GeometryCollection is spatially equal to the GeometryCollection 'g'
            </summary>
            <param name="g"></param>
            <returns>True if the GeometryCollections are equals</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.GeometryCollection.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.GeometryCollection.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry, returned as a BoundingBox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.NumGeometries">
            <summary>
            Gets the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Collection">
            <summary>
            Gets or sets the GeometryCollection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.#ctor">
            <summary>
            Instantiates a MultiPolygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Polygons">
            <summary>
            Collection of polygons in the multipolygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Area">
            <summary>
            Returns summed area of the Polygons in the MultiPolygon collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Centroid">
            <summary>
            The mathematical centroid for the surfaces as a Point.
            The result is not guaranteed to be on any of the surfaces.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Wgs84ConversionInfo">
            <summary>
            Parameters for a geographic transformation into WGS84. The Bursa Wolf parameters should be applied 
            to geocentric coordinates, where the X axis points towards the Greenwich Prime Meridian, the Y axis
            points East, and the Z axis points North.
            </summary>
            <remarks>
            <para>These parameters can be used to approximate a transformation from the horizontal datum to the
            WGS84 datum using a Bursa Wolf transformation. However, it must be remembered that this transformation
            is only an approximation. For a given horizontal datum, different Bursa Wolf transformations can be
            used to minimize the errors over different regions.</para>
            <para>If the DATUM clause contains a TOWGS84 clause, then this should be its “preferred” transformation,
            which will often be the transformation which gives a broad approximation over the whole area of interest
            (e.g. the area of interest in the containing geographic coordinate system).</para>
            <para>Sometimes, only the first three or six parameters are defined. In this case the remaining
            parameters must be zero. If only three parameters are defined, then they can still be plugged into the
            Bursa Wolf formulas, or you can take a short cut. The Bursa Wolf transformation works on geocentric
            coordinates, so you cannot apply it onto geographic coordinates directly. If there are only three
            parameters then you can use the Molodenski or abridged Molodenski formulas.</para>
            <para>If a datums ToWgs84Parameters parameter values are zero, then the receiving
            application can assume that the writing application believed that the datum is approximately equal to
            WGS84.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.#ctor">
            <summary>
            Initializes an instance of Wgs84ConversionInfo with default parameters (all values = 0)
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes an instance of Wgs84ConversionInfo
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes an instance of Wgs84ConversionInfo
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
            <param name="areaOfUse">Area of use for this transformation</param>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Dx">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Dy">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Dz">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Ex">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Ey">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Ez">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Ppm">
            <summary>
            Bursa Wolf scaling in parts per million.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Wgs84ConversionInfo.AreaOfUse">
            <summary>
            Human readable text describing intended region of transformation.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.GetAffineTransform">
            <summary>
            Affine Bursa-Wolf matrix transformation
            </summary>
            <remarks>
            <para>Transformation of coordinates from one geographic coordinate system into another 
            (also colloquially known as a "datum transformation") is usually carried out as an 
            implicit concatenation of three transformations:</para>
            <para>[geographical to geocentric >> geocentric to geocentric >> geocentric to geographic</para>
            <para>
            The middle part of the concatenated transformation, from geocentric to geocentric, is usually 
            described as a simplified 7-parameter Helmert transformation, expressed in matrix form with 7 
            parameters, in what is known as the "Bursa-Wolf" formula:<br/>
            <code>
             S = 1 + Ppm/1000000
             [ Xt ]    [     S   -Ez*S   +Ey*S   Dx ]  [ Xs ]
             [ Yt ]  = [ +Ez*S       S   -Ex*S   Dy ]  [ Ys ]
             [ Zt ]    [ -Ey*S   +Ex*S       S   Dz ]  [ Zs ]
             [ 1  ]    [     0       0       0    1 ]  [ 1  ]
            </code><br/>
            The parameters are commonly referred to defining the transformation "from source coordinate system 
            to target coordinate system", whereby (XS, YS, ZS) are the coordinates of the point in the source 
            geocentric coordinate system and (XT, YT, ZT) are the coordinates of the point in the target 
            geocentric coordinate system. But that does not define the parameters uniquely; neither is the
            definition of the parameters implied in the formula, as is often believed. However, the 
            following definition, which is consistent with the "Position Vector Transformation" convention, 
            is common E&amp;P survey practice: 
            </para>	
            <para>(dX, dY, dZ): Translation vector, to be added to the point's position vector in the source 
            coordinate system in order to transform from source system to target system; also: the coordinates 
            of the origin of source coordinate system in the target coordinate system </para>
            <para>(RX, RY, RZ): Rotations to be applied to the point's vector. The sign convention is such that 
            a positive rotation about an axis is defined as a clockwise rotation of the position vector when 
            viewed from the origin of the Cartesian coordinate system in the positive direction of that axis;
            e.g. a positive rotation about the Z-axis only from source system to target system will result in a
            larger longitude value for the point in the target system. Although rotation angles may be quoted in
            any angular unit of measure, the formula as given here requires the angles to be provided in radians.</para>
            <para>: The scale correction to be made to the position vector in the source coordinate system in order 
            to obtain the correct scale in the target coordinate system. M = (1 + dS*10-6), whereby dS is the scale
            correction expressed in parts per million.</para>
            <para><see href="http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs35.html"/> for an explanation of the Bursa-Wolf transformation</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.ToString">
            <summary>
            Returns the Well Known Text (WKT) for this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
            <returns>WKT representaion</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.GetHashCode">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Wgs84ConversionInfo.Equals(SharpMap.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Wgs84ConversionInfo.WKT">
            <summary>
            Returns the Well Known Text (WKT) for this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
            <returns>WKT representaion</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Wgs84ConversionInfo.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Wgs84ConversionInfo.HasZeroValuesOnly">
            <summary>
            Returns true of all 7 parameter values are 0.0
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WkbByteOrder">
            <summary>
            Specifies the specific binary encoding (NDR or XDR) used for a geometry byte stream
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Xdr">
            <summary>
            XDR (Big Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The XDR representation of an Unsigned Integer is Big Endian (most significant byte first).</para>
            <para>The XDR representation of a Double is Big Endian (sign bit is first byte).</para>
            </remarks>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Ndr">
            <summary>
            NDR (Little Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The NDR representation of an Unsigned Integer is Little Endian (least significant byte first).</para>
            <para>The NDR representation of a Double is Little Endian (sign bit is last byte).</para>
            </remarks>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates">
            <summary>
            Helper class for serializing System.Drawing.Pen and System.Drawing.Brush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.GetSurrogateSelectors">
            <summary>
            Gets the surrogate selecteds for System.Drawing.Pen and System.Drawing.Brush
            </summary>
            <returns>SurrogateSelector</returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.SolidBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.SolidBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.TextureBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.PenSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Pen
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.MatrixSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Drawing2D.Matrix
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Geometries.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiCurve.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.IsClosed">
            <summary>
            Returns true if this MultiCurve is closed (StartPoint=EndPoint for each curve in this MultiCurve)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Length">
            <summary>
            The Length of this MultiCurve which is equal to the sum of the lengths of the element Curves.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.ConnectorPool">
            <summary>
            The ConnectorPool class implements the functionality for 
            the administration of the connectors. Controls pooling and
            sharing of connectors.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.ConnectorPoolManager">
            <summary>Unique static instance of the connector pool manager.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.PooledConnectors">
            <summary>List of unused, pooled connectors avaliable to the next RequestConnector() call.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.SharedConnectors">
            <summary>List of shared, in use connectors.</summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.#ctor">
            <summary>
            Default constructor, creates a new connector pool object.
            Should only be used once in an application, since more 
            than one connector pool does not make much sense..
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.RequestConnector(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Searches the shared and pooled connector lists for a
            matching connector object or creates a new one.
            </summary>
            <param name="provider">Provider requested to connect to the database server</param>
            <param name="Shared">Allows multiple connections on a single connector. </param>
            <returns>A pooled connector object.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory">
            <summary>
            Creates math transforms.
            </summary>
            <remarks>
            <para>CT_MathTransformFactory is a low level factory that is used to create CT_MathTransform objects. Many high level GIS applications will never need to use a CT_MathTransformFactory directly; they can use a CT_CoordinateTransformationFactory instead. However, the CT_MathTransformFactory interface is specified here, since it can be used directly by applications that wish to transform other types of coordinates (e.g. color coordinates, or image pixel coordinates).</para>
            <para>The following comments assume that the same vendor implements the math transform factory interfaces and math transform interfaces.</para>
            <para>A math transform is an object that actually does the work of applying formulae to coordinate values. The math transform does not know or care how the coordinates relate to positions in the real world. This lack of semantics makes implementing CT_MathTransformFactory significantly easier than it would be otherwise.</para>
            <para>For example CT_MathTransformFactory can create affine math transforms. The affine transform applies a matrix to the coordinates without knowing how what it is doing relates to the real world. So if the matrix scales Z values by a factor of 1000, then it could be converting meters into millimeters, or it could be converting kilometers into meters.</para>
            <para>Because math transforms have low semantic value (but high mathematical value), programmers who do not have much knowledge of how GIS applications use coordinate systems, or how those coordinate systems relate to the real world can implement CT_MathTransformFactory.</para>
            <para>The low semantic content of math transforms also means that they will be useful in applications that have nothing to do with GIS coordinates. For example, a math transform could be used to map color coordinates between different color spaces, such as converting (red, green, blue) colors into (hue, light, saturation) colors.</para>
            <para>Since a math transform does not know what its source and target coordinate systems mean, it is not necessary or desirable for a math transform object to keep information on its source and target coordinate systems.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreateAffineTransform(System.Double[0:,0:])">
            <summary>
            Creates an affine transform from a matrix.
            </summary>
            <remarks>If the transform's input dimension is M, and output dimension is N, then the matrix will have size [N+1][M+1]. The +1 in the matrix dimensions allows the matrix to do a shift, as well as a rotation. The [M][j] element of the matrix will be the j'th ordinate of the moved origin. The [i][N] element of the matrix will be 0 for i less than M, and 1 for i equals M.</remarks>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreateConcatenatedTransform(SharpMap.CoordinateSystems.Transformations.MathTransform,SharpMap.CoordinateSystems.Transformations.MathTransform)">
            <summary>
            Creates a transform by concatenating two existing transforms. A concatenated transform acts in the same way as applying two transforms, one after the other.
            </summary>
            <remarks>The dimension of the output space of the first transform must match the dimension of the input space in the second transform. If you wish to concatenate more than two transforms, then you can repeatedly use this method.</remarks>
            <param name="transform1"></param>
            <param name="transform2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreateFromWKT(System.String)">
            <summary>
            Creates a math transform from a Well-Known Text string.
            </summary>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreateFromXML(System.String)">
            <summary>
            Creates a math transform from XML.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreateParameterizedTransform(System.String,System.Collections.Generic.List{SharpMap.CoordinateSystems.Parameter})">
            <summary>
            Creates a transform from a classification name and parameters.
            </summary>
            <remarks>
            The client must ensure that all the linear parameters are expressed in meters, and all the angular parameters are expressed in degrees. Also, they must supply "semi_major" and "semi_minor" parameters for cartographic projection transforms.
            </remarks>
            <param name="classification"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.CreatePassThroughTransform(System.Int32,SharpMap.CoordinateSystems.Transformations.MathTransform)">
            <summary>
            Creates a transform which passes through a subset of ordinates to another transform.
            </summary>
            <remarks>
            This allows transforms to operate on a subset of ordinates. For example, if you have (Lat,Lon,Height) coordinates, then you may wish to convert the height values from meters to feet without affecting the (Lat,Lon) values. If you wanted to affect the (Lat,Lon) values and leave the Height values alone, then you would have to swap the ordinates around to (Height,Lat,Lon). You can do this with an affine map.
            </remarks>
            <param name="firstAffectedOrdinate"></param>
            <param name="subTransform"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.IsParameterAngular(System.String)">
            <summary>
            Tests whether parameter is angular. Clients must ensure that all angular parameter values are in degrees.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.IMathTransformFactory.IsParameterLinear(System.String)">
            <summary>
            Tests whether parameter is linear. Clients must ensure that all linear parameter values are in meters.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation">
            <summary>
            Describes a coordinate transformation. This class only describes a 
            coordinate transformation, it does not actually perform the transform 
            operation on points. To transform points you must use a <see cref="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform"/>.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation">
            <summary>
            Describes a coordinate transformation. This interface only describes a 
            coordinate transformation, it does not actually perform the transform 
            operation on points. To transform points you must use a math transform.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain in source coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.Authority">
            <summary>
            Authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An Authority is an organization that maintains definitions of Authority Codes. For example the European Petroleum Survey Group (EPSG) maintains a database of coordinate systems, and other spatial referencing objects, where each object has a code number ID. For example, the EPSG code for a WGS84 Lat/Lon coordinate system is ‘4326’
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.AuthorityCode">
            <summary>
            Code used by authority to identify transformation. An empty string is used for no code.
            </summary>
            <remarks>The AuthorityCode is a compact string defined by an Authority to reference a particular spatial reference object. For example, the European Survey Group (EPSG) authority uses 32 bit integers to reference coordinate systems, so all their code strings will consist of a few digits. The EPSG code for WGS84 Lat/Lon is ‘4326’.</remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.Name">
            <summary>
            Name of transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.SourceCS">
            <summary>
            Source coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.TargetCS">
            <summary>
            Target coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformation.TransformType">
            <summary>
            Semantic type of transform. For example, a datum transformation or a coordinate conversion.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.#ctor(SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.Transformations.TransformType,SharpMap.CoordinateSystems.Transformations.IMathTransform,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            Initializes an instance of a CoordinateTransformation
            </summary>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <param name="transformType">Transformation type</param>
            <param name="mathTransform">Math transform</param>
            <param name="name">Name of transform</param>
            <param name="authority">Authority</param>
            <param name="authorityCode">Authority code</param>
            <param name="areaOfUse">Area of use</param>
            <param name="remarks">Remarks</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain in source coordinate system.
            </summary>		
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.Authority">
            <summary>
            Authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An Authority is an organization that maintains definitions of Authority Codes. For example the European Petroleum Survey Group (EPSG) maintains a database of coordinate systems, and other spatial referencing objects, where each object has a code number ID. For example, the EPSG code for a WGS84 Lat/Lon coordinate system is ‘4326’
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.AuthorityCode">
            <summary>
            Code used by authority to identify transformation. An empty string is used for no code.
            </summary>
            <remarks>The AuthorityCode is a compact string defined by an Authority to reference a particular spatial reference object. For example, the European Survey Group (EPSG) authority uses 32 bit integers to reference coordinate systems, so all their code strings will consist of a few digits. The EPSG code for WGS84 Lat/Lon is ‘4326’.</remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.Name">
            <summary>
            Name of transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.SourceCS">
            <summary>
            Source coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.TargetCS">
            <summary>
            Target coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.CoordinateTransformation.TransformType">
            <summary>
            Semantic type of transform. For example, a datum transformation or a coordinate conversion.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IPrimeMeridian">
            <summary>
            The IPrimeMeridian interface defines the standard information stored with prime
            meridian objects. Any prime meridian object must implement this interface as
            well as the ISpatialReferenceInfo interface.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IPrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IPrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.GeographicTransform">
            <summary>
            The GeographicTransform class is implemented on geographic transformation objects and
            implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicTransform.Forward(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms an array of points from the source geographic coordinate
            system to the target geographic coordinate system.
            </summary>
            <param name="points">On input points in the source geographic coordinate system</param>
            <returns>Output points in the target geographic coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicTransform.Inverse(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms an array of points from the target geographic coordinate
            system to the source geographic coordinate system.
            </summary>
            <param name="points">Input points in the target geographic coordinate system,</param>
            <returns>Output points in the source geographic coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicTransform.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicTransform.SourceGCS">
            <summary>
            Gets or sets the source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicTransform.ParameterInfo">
            <summary>
            Returns an accessor interface to the parameters for this geographic transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicTransform.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicTransform.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.GeographicCoordinateSystem">
            <summary>
            A coordinate system based on latitude and longitude. 
            </summary>
            <remarks>
            Some geographic coordinate systems are Lat/Lon, and some are Lon/Lat. 
            You can find out which this is by examining the axes. You should also 
            check the angular units, since not all geographic coordinate systems 
            use degrees.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IGeographicCoordinateSystem">
            <summary>
            The IGeographicCoordinateSystem interface is a subclass of IGeodeticSpatialReference and
            defines the standard information stored with geographic coordinate system objects.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IGeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeographicCoordinateSystem.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicCoordinateSystem.#ctor(SharpMap.CoordinateSystems.IAngularUnit,SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.IPrimeMeridian,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of a Geographic Coordinate System
            </summary>
            <param name="angularUnit">Angular units</param>
            <param name="horizontalDatum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeographicCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.WGS84">
            <summary>
            Creates a decimal degrees geographic coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeographicCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.GeocentricCoordinateSystem">
            <summary>
            A 3D coordinate system, with its origin at the center of the Earth.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IGeocentricCoordinateSystem">
            <summary>
            A 3D coordinate system, with its origin at the center of the Earth.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be 
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets the units used along all the axes.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IGeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Returns the PrimeMeridian.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.WGS84">
            <summary>
            Creates a geocentric coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be 
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets the units used along all the axes.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Returns the PrimeMeridian.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.GeocentricCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer">
            <summary>
            This class renders individual geometry features to a graphics object using the settings of a map object.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiLineString(System.Drawing.Graphics,SharpMap.Geometries.MultiLineString,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a MultiLineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="lines">MultiLineString to be rendered</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,SharpMap.Geometries.LineString,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPolygon(System.Drawing.Graphics,SharpMap.Geometries.MultiPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.Map)">
            <summary>
            Renders a multipolygon byt rendering each polygon in the collection by calling DrawPolygon.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pols">MultiPolygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPolygon(System.Drawing.Graphics,SharpMap.Geometries.Polygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.Map)">
            <summary>
            Renders a polygon to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pol">Polygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLabel(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Color,System.Drawing.Brush,System.Drawing.Pen,System.Single,System.String,SharpMap.Map)">
            <summary>
            Renders a label to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="LabelPoint">Label placement</param>
            <param name="Offset">Offset of label in screen coordinates</param>
            <param name="font">Font used for rendering</param>
            <param name="forecolor">Font forecolor</param>
            <param name="backcolor">Background color</param>
            <param name="halo">Color of halo</param>
            <param name="rotation">Text rotation in degrees</param>
            <param name="text">Text to render</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.clipPolygon(System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Clips a polygon to the view.
            Based on UMN Mapserver renderer [This method is currently not used. It seems faster just to draw the outside points as well)
            </summary>
            <param name="vertices">vertices in image coordinates</param>
            <param name="width">Width of map in image coordinates</param>
            <param name="height">Height of map in image coordinates</param>
            <returns>Clipped polygon</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,SharpMap.Geometries.Point,System.Drawing.Bitmap,System.Single,System.Drawing.PointF,System.Single,SharpMap.Map)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolscale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(System.Drawing.Graphics,SharpMap.Geometries.MultiPoint,System.Drawing.Bitmap,System.Single,System.Drawing.PointF,System.Single,SharpMap.Map)">
            <summary>
            Renders a <see cref="T:SharpMap.Geometries.MultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolscale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ITheme">
            <summary>
            Interface for rendering a thematic layer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a feature
            </summary>
            <param name="attribute">Attribute to calculate color from</param>
            <returns>Color</returns>
        </member>
        <member name="T:SharpMap.Rendering.LabelBox">
            <summary>
            Defines an axis-aligned box around a label, used for collision detection
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new LabelBox instance
            </summary>
            <param name="left">Left side of box</param>
            <param name="top">Top of box</param>
            <param name="width">Width of the box</param>
            <param name="height">Height of the box</param>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new LabelBox instance based on a rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.Intersects(SharpMap.Rendering.LabelBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.CompareTo(SharpMap.Rendering.LabelBox)">
            <summary>
            Returns 0 if the boxes intersects each other
            </summary>
            <param name="other">labelbox to perform intersectiontest with</param>
            <returns>0 if the intersect</returns>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Left">
            <summary>
            The Left tie-point for the Label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Top">
            <summary>
            The Top tie-point for the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Width">
            <summary>
            Width of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Height">
            <summary>
            Height of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Right">
            <summary>
            Right side of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Bottom">
            <summary>
            Bottom of th ebox
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Label">
            <summary>
            Class for storing a label instance
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Label.#ctor(System.String,System.Drawing.PointF,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance
            </summary>
            <param name="text">Text to write</param>
            <param name="labelpoint">Position of label</param>
            <param name="rotation">Rotation</param>
            <param name="priority">Label priority used for collision detection</param>
            <param name="collisionbox">Box around label for collision detection</param>
            <param name="style">The style of the label</param>
        </member>
        <member name="M:SharpMap.Rendering.Label.CompareTo(SharpMap.Rendering.Label)">
            <summary>
            Tests if two label boxes intersects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Label.Compare(SharpMap.Rendering.Label,SharpMap.Rendering.Label)">
            <summary>
            Checks if two labels intersect
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Label.Text">
            <summary>
            The text of the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.LabelPoint">
            <summary>
            Label position
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.Font">
            <summary>
            Label font
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.Rotation">
            <summary>
            Label rotation
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.Priority">
            <summary>
            Text rotation in radians
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.Box">
            <summary>
            Label box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.Style">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.LabelStyle"/> of this label
            </summary>
        </member>
        <member name="T:SharpMap.Layers.WmsLayer">
            <summary>
            Web Map Service layer
            </summary>
            <remarks>
            The WmsLayer is currently very basic and doesn't support automatic fetching of the WMS Service Description.
            Instead you would have to add the nessesary parameters to the URL,
            and the WmsLayer will set the remaining BoundingBox property and proper requests that changes between the requests.
            See the example below.
            </remarks>
            <example>
            The following example creates a map with a WMS layer the Demis WMS Server
            <code lang="C#">
            myMap = new SharpMap.Map(new System.Drawing.Size(500,250);
            string wmsUrl = "http://www2.demis.nl/mapserver/request.asp";
            SharpMap.Layers.WmsLayer myLayer = new SharpMap.Layers.WmsLayer("Demis WMS", myLayer);
            myLayer.AddLayer("Bathymetry");
            myLayer.AddLayer("Countries");
            myLayer.AddLayer("Topography");
            myLayer.AddLayer("Hillshading");
            myLayer.SetImageFormat(layWms.OutputFormats[0]);
            myLayer.SpatialReferenceSystem = "EPSG:4326";	
            myMap.Layers.Add(myLayer);
            myMap.Center = new SharpMap.Geometries.Point(0, 0);
            myMap.Zoom = 360;
            myMap.MaximumZoom = 360;
            myMap.MinimumZoom = 0.1;
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername"></param>
            <param name="url"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddLayer(System.String)">
            <summary>
            Adds a layer to WMS request
            </summary>
            <remarks>Layer names are case sensitive.</remarks>
            <param name="name">Name of layer</param>
            <exception cref="T:System.ArgumentException">Throws an exception is an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.LayerExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="layer"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayer(System.String)">
            <summary>
            Removes a layer from the layer list
            </summary>
            <param name="name">Name of layer to remove</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayerAt(System.Int32)">
            <summary>
            Removes the layer at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllLayers">
            <summary>
            Removes all layers
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddStyle(System.String)">
            <summary>
            Adds a style to the style collection
            </summary>
            <param name="name">Name of style</param>
            <exception cref="T:System.ArgumentException">Throws an exception is an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.StyleExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="layer">layer</param>
            <param name="name">name of style</param>
            <returns>True of style exists</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyle(System.String)">
            <summary>
            Removes a style from the collection
            </summary>
            <param name="name">Name of style</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyleAt(System.Int32)">
            <summary>
            Removes a style at specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllStyles">
            <summary>
            Removes all styles from the list
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername"></param>
            <param name="url">Url of service description</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.SetImageFormat(System.String)">
            <summary>
            Sets the image type to use when requesting images from the WMS server
            </summary>
            <remarks>
            <para>See the <see cref="P:SharpMap.Layers.WmsLayer.OutputFormats"/> property for a list of available mime types supported by the WMS server</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Throws an exception if either the mime type isn't offered by the WMS
            or GDI+ doesn't support this mime type.</exception>
            <param name="mimeType">Mime type of image format</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.GetRequestUrl(SharpMap.Geometries.BoundingBox,System.Drawing.Size)">
            <summary>
            Gets the URL for a map request base on current settings, the image size and boundingbox
            </summary>
            <param name="box">Area the WMS request should cover</param>
            <param name="size">Size of image</param>
            <returns>URL for WMS request</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.GetPreferredMethod">
            <summary>
            Returns the type of the layer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.LayerList">
            <summary>
            Gets the list of enabled layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.StylesList">
            <summary>
            Gets the list of enabled styles
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.RootLayer">
            <summary>
            Gets the hiarchial list of available WMS layers from this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.OutputFormats">
            <summary>
            Gets the list of available formats
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.SpatialReferenceSystem">
            <summary>
            Gets or sets the spatial reference used for the WMS server request
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ServiceDescription">
            <summary>
            Gets the service description from this server
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Version">
            <summary>
            Gets the WMS Server version of this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ImageAttributes">
            <summary>
            When specified, applies image attributes at image (fx. make WMS layer semi-transparent)
            </summary>
            <remarks>
            <para>You can make the WMS layer semi-transparent by settings a up a ColorMatrix,
            or scale/translate the colors in any other way you like.</para>
            <example>
            Setting the WMS layer to be semi-transparent.
            <code lang="C#">
            float[][] colorMatrixElements = { 
            			new float[] {1,  0,  0,  0, 0},
            			new float[] {0,  1,  0,  0, 0},
            			new float[] {0,  0,  1,  0, 0},
            			new float[] {0,  0,  0,  0.5, 0},
            			new float[] {0, 0, 0, 0, 1}};
            ColorMatrix colorMatrix = new ColorMatrix(colorMatrixElements);
            ImageAttributes imageAttributes = new ImageAttributes();
            imageAttributes.SetColorMatrix(
            	   colorMatrix,
            	   ColorMatrixFlag.Default,
            	   ColorAdjustType.Bitmap);
            myWmsLayer.ImageAttributes = imageAttributes;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip rendering the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Credentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Proxy">
            <summary>
            Gets or sets the proxy used for requesting a webresource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.LinearRing">
            <summary>
            A LinearRing is a LineString that is both closed and simple.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.LineString">
            <summary>
            A LineString is a Curve with linear interpolation between points. Each consecutive pair of points defines a
            line segment.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Curve">
            <summary>
            A Curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of Curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Curve.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Length">
            <summary>
            The length of this Curve in its associated spatial reference.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.StartPoint">
            <summary>
            The start point of this Curve.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.EndPoint">
            <summary>
            The end point of this Curve.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsClosed">
            <summary>
            Returns true if this Curve is closed (StartPoint = EndPoint).
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsRing">
            <summary>
            true if this Curve is closed (StartPoint = EndPoint) and
            this Curve is simple (does not pass through the same point more than once).
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LineString from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor">
            <summary>
            Initializes an instance of a LineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Point(System.Int32)">
            <summary>
            Returns the specified point N in this Linestring.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the linestring to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Linestring in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Equals(SharpMap.Geometries.LineString)">
            <summary>
            Checks whether this instance is spatially equal to the LineString 'l'
            </summary>
            <param name="l">LineString to compare to</param>
            <returns>true of the objects are spatially equal</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.LineString.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.LineString.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t">Distance down the line</param>
            <returns>Point at line at distance t from StartPoint</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns>BoundingBox for this geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Vertices">
            <summary>
            Gets or sets the collection of vertices in this Geometry
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.NumPoints">
            <summary>
            The number of points in this LineString.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="P:SharpMap.Geometries.LineString.StartPoint">
            <summary>
            Returns the vertice where this Geometry begins
            </summary>
            <returns>First vertice in LineString</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.EndPoint">
            <summary>
            Gets the vertice where this Geometry ends
            </summary>
            <returns>Last vertice in LineString</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.IsRing">
            <summary>
            Returns true if this LineString is closed and simple
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Length">
            <summary>
            The length of this LineString, as measured in the spatial reference system of this LineString.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LinearRing from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor">
            <summary>
            Initializes an instance of a LinearRing
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.IsCCW">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.IsPointWithin(SharpMap.Geometries.Point)">
            <summary>
            Returns true of the Point 'p' is within the instance of this ring
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.LinearRing.Area">
            <summary>
            Returns the area of the LinearRing
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.CoordinateTransformationAuthorityFactory">
            <summary>
            Creates coordinate transformation objects from codes. The codes are maintained by an external authority. A commonly used authority is EPSG, which is also used in the GeoTIFF standard
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ProjectionParameter">
            <summary>
            A named projection parameter value.
            </summary>
            <remarks>
            The linear units of parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on. (Notice that this is different from <see cref="T:SharpMap.CoordinateSystems.Parameter"/>,
            where the units are always meters and degrees.)
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ProjectionParameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes an instance of a ProjectionParameter
            </summary>
            <param name="name">Name of parameter</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectionParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectionParameter.Value">
            <summary>
            Parameter value.
            The linear units of a parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectionParameter.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectionParameter.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IFittedCoordinateSystem">
            <summary>
            A coordinate system which sits inside another coordinate system. The fitted 
            coordinate system can be rotated and shifted, or use any other math transform
            to inject itself into the base coordinate system.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IFittedCoordinateSystem.ToBase">
            <summary>
            Gets Well-Known Text of a math transform to the base coordinate system. 
            The dimension of this fitted coordinate system is determined by the source 
            dimension of the math transform. The transform should be one-to-one within 
            this coordinate system's domain, and the base coordinate system dimension 
            must be at least as big as the dimension of this coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IFittedCoordinateSystem.BaseCoordinateSystem">
            <summary>
            Gets underlying coordinate system.
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsException">
            <summary>
            Class for throwing WMS exceptions to client
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsException.WmsExceptionCode">
            <summary>
            WMS Exception codes
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidFormat">
            <summary>
            Request contains a Format not offered by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidCRS">
            <summary>
            Request contains a CRS not offered by the server for one or more of the
            Layers in the request.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.LayerNotDefined">
            <summary>
            GetMap request is for a Layer not offered by the server, or GetFeatureInfo
            request is for a Layer not shown on the map.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.StyleNotDefined">
            <summary>
            Request is for a Layer in a Style not offered by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.LayerNotQueryable">
            <summary>
            GetFeatureInfo request is applied to a Layer which is not declared queryable.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidPoint">
            <summary>
            GetFeatureInfo request contains invalid X or Y value.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.CurrentUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            equal to current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            greater than current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.MissingDimensionValue">
            <summary>
            Request does not include a sample dimension value, and the server did not
            declare a default value for that dimension.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidDimensionValue">
            <summary>
            Request contains an invalid sample dimension value.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.OperationNotSupported">
            <summary>
            Request is for an optional operation that is not supported by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.NotApplicable">
            <summary>
            No error code
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientTheme">
            <summary>
            The GradientTheme class defines a gradient color thematic rendering of features based by a numeric attribute.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.#ctor(System.String,System.Double,System.Double,SharpMap.Styles.IStyle,SharpMap.Styles.IStyle)">
            <summary>
            Initializes a new instance of the GradientTheme class
            </summary>
            <remarks>
            <para>The gradient theme interpolates linearly between two styles based on a numerical attribute in the datasource.
            This is useful for scaling symbols, line widths, line and fill colors from numerical attributes.</para>
            <para>Colors are interpolated between two colors, but if you want to interpolate through more colors (fx. a rainbow),
            set the <see cref="P:SharpMap.Rendering.Thematics.GradientTheme.TextColorBlend"/>, <see cref="P:SharpMap.Rendering.Thematics.GradientTheme.LineColorBlend"/> and <see cref="P:SharpMap.Rendering.Thematics.GradientTheme.FillColorBlend"/> properties
            to a custom <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/>.
            </para>
            <para>The following properties are scaled (properties not mentioned here are not interpolated):
            <list type="table">
            	<listheader><term>Property</term><description>Remarks</description></listheader>
            	<item><term><see cref="T:System.Drawing.Color"/></term><description>Red, Green, Blue and Alpha values are linearly interpolated.</description></item>
            	<item><term><see cref="T:System.Drawing.Pen"/></term><description>The color, width, color of pens are interpolated. MiterLimit,StartCap,EndCap,LineJoin,DashStyle,DashPattern,DashOffset,DashCap,CompoundArray, and Alignment are switched in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:System.Drawing.SolidBrush"/></term><description>SolidBrush color are interpolated. Other brushes are not supported.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.VectorStyle"/></term><description>MaxVisible, MinVisible, Line, Outline, Fill and SymbolScale are scaled linearly. Symbol, EnableOutline and Enabled switch in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.LabelStyle"/></term><description>FontSize, BackColor, ForeColor, MaxVisible, MinVisible, Offset are scaled linearly. All other properties use min-style.</description></item>
            </list>
            </para>
            <example>
            Creating a rainbow colorblend showing colors from red, through yellow, green and blue depicting 
            the population density of a country.
            <code lang="C#">
            //Create two vector styles to interpolate between
            SharpMap.Styles.VectorStyle min = new SharpMap.Styles.VectorStyle();
            SharpMap.Styles.VectorStyle max = new SharpMap.Styles.VectorStyle();
            min.Outline.Width = 1f; //Outline width of the minimum value
            max.Outline.Width = 3f; //Outline width of the maximum value
            //Create a theme interpolating population density between 0 and 400
            SharpMap.Rendering.Thematics.GradientTheme popdens = new SharpMap.Rendering.Thematics.GradientTheme("PopDens", 0, 400, min, max);
            //Set the fill-style colors to be a rainbow blend from red to blue.
            popdens.FillColorBlend = SharpMap.Rendering.Thematics.ColorBlend.Rainbow5;
            myVectorLayer.Theme = popdens;
            </code>
            </example>
            </remarks>
            <param name="columnName">Name of column to extract the attribute</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="minStyle">Color for minimum value</param>
            <param name="maxStyle">Color for maximum value</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a numeric DataColumn, where style
            properties are linearly interpolated between max and min values.
            </summary>
            <param name="row">Feature</param>
            <returns><see cref="T:SharpMap.Styles.IStyle">Style</see> calculated by a linear interpolation between the min/max styles</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.Min">
            <summary>
            Gets or sets the minimum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.Max">
            <summary>
            Gets or sets the maximum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.MinStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the minimum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.MaxStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the maximum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.TextColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on labels
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.LineColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on lines
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.FillColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used as Fill
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Exceptions.RenderException">
            <summary>
            Exception thrown when a layer rendering fails
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SharpMap.Geometries.GeometryType2">
            <summary>
            Enumeration of Simple Features Geometry types
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Geometry">
            <summary>
            Geometry is the root class of the hierarchy. Geometry is an abstract (non-instantiable) class.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in coordinate space.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Curve">
            <summary>
            A curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.LineString">
            <summary>
            A LineString is a curve with linear interpolation between points. Each consecutive
            pair of points defines a line segment.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Polygon">
            <summary>
            A Polygon is a planar surface, defined by 1 exterior boundary and 0 or more interior
            boundaries. Each interior boundary defines a hole in the polygon.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint
            are restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are
            surfaces. The interiors of any two surfaces in a MultiSurface may not intersect.
            The boundaries of any two elements in a MultiSurface may intersect at most at a
            finite number of points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.GeographicTransform">
            <summary>
            The GeographicTransform class is implemented on geographic transformation objects and
            implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeographicTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeographicTransform.Transform(SharpMap.Geometries.Point)">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeographicTransform.TransformList(System.Collections.Generic.List{SharpMap.Geometries.Point})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeographicTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.GeographicTransform.SourceGCS">
            <summary>
            Gets or sets the source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.GeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.GeographicTransform.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification. [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Transformations.GeographicTransform.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IProjectedCoordinateSystem">
            <summary>
            The IProjectedCoordinateSystem interface defines the standard information stored with
            projected coordinate system objects. A projected coordinate system is defined using a
            geographic coordinate system object and a projection object that defines the
            coordinate transformation from the geographic coordinate system to the projected
            coordinate systems. The instances of a single ProjectedCoordinateSystem COM class can
            be used to model different projected coordinate systems (e.g., UTM Zone 10, Albers)
            by associating the ProjectedCoordinateSystem instances with Projection instances
            belonging to different Projection COM classes (Transverse Mercator and Albers,
            respectively).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the geographic coordinate system associated with the projected
            coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the linear (projected) units of the projected coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection for the projected coordinate system.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader">
            <summary>
            Creates an object based on the supplied Well Known Text (WKT).
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.Parse(System.String)">
            <summary>
            Reads and parses a WKT-formatted projection string.
            </summary>
            <param name="wkt">String containing WKT.</param>
            <returns>Object representation of the WKT.</returns>
            <exception cref="T:System.ArgumentException">If a token is not recognised.</exception>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadUnit(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a IUnit given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadLinearUnit(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:SharpMap.CoordinateSystems.LinearUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadAngularUnit(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:SharpMap.CoordinateSystems.AngularUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadAxis(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:SharpMap.CoordinateSystems.AxisInfo"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An AxisInfo object.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadCoordinateSystem(System.String,SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="coordinateSystem"></param>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadWGS84ConversionInfo(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Reads either 3, 6 or 7 parameter Bursa-Wolf values from TOWGS84 token
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadEllipsoid(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadProjection(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadProjectedCoordinateSystem(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadGeographicCoordinateSystem(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadHorizontalDatum(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.CoordinateSystemWktReader.ReadPrimeMeridian(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsServer">
            <summary>
            This is a helper class designed to make it easy to create a WMS Service
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.ParseQueryString(SharpMap.Map,SharpMap.Web.Wms.Capabilities.WmsServiceDescription)">
            <summary>
            Generates a WMS 1.3.0 compliant response based on a <see cref="T:SharpMap.Map"/> and the current HttpRequest.
            </summary>
            <remarks>
            <para>
            The Web Map Server implementation in SharpMap requires v1.3.0 compatible clients,
            and support the basic operations "GetCapabilities" and "GetMap"
            as required by the WMS v1.3.0 specification. SharpMap does not support the optional
            GetFeatureInfo operation for querying.
            </para>
            <example>
            Creating a WMS server in ASP.NET is very simple using the classes in the SharpMap.Web.Wms namespace.
            <code lang="C#">
            void page_load(object o, EventArgs e)
            {
            	//Get the path of this page
            	string url = (Request.Url.Query.Length&gt;0?Request.Url.AbsoluteUri.Replace(Request.Url.Query,""):Request.Url.AbsoluteUri);
            	SharpMap.Web.Wms.Capabilities.WmsServiceDescription description =
            		new SharpMap.Web.Wms.Capabilities.WmsServiceDescription("Acme Corp. Map Server", url);
            	
            	// The following service descriptions below are not strictly required by the WMS specification.
            	
            	// Narrative description and keywords providing additional information 
            	description.Abstract = "Map Server maintained by Acme Corporation. Contact: webmaster@wmt.acme.com. High-quality maps showing roadrunner nests and possible ambush locations.";
            	description.Keywords.Add("bird");
            	description.Keywords.Add("roadrunner");
            	description.Keywords.Add("ambush");
            	
            	//Contact information 
            	description.ContactInformation.PersonPrimary.Person = "John Doe";
            	description.ContactInformation.PersonPrimary.Organisation = "Acme Inc";
            	description.ContactInformation.Address.AddressType = "postal";
            	description.ContactInformation.Address.Country = "Neverland";
            	description.ContactInformation.VoiceTelephone = "1-800-WE DO MAPS";
            	//Impose WMS constraints
            	description.MaxWidth = 1000; //Set image request size width
            	description.MaxHeight = 500; //Set image request size height
            	
            	//Call method that sets up the map
            	//We just add a dummy-size, since the wms requests will set the image-size
            	SharpMap.Map myMap = MapHelper.InitializeMap(new System.Drawing.Size(1,1));
            	
            	//Parse the request and create a response
            	SharpMap.Web.Wms.WmsServer.ParseQueryString(myMap,description);
            }
            </code>
            </example>
            </remarks>
            <param name="map">Map to serve on WMS</param>
            <param name="description">Description of map service</param>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.GetEncoderInfo(System.String)">
            <summary>
            Used for setting up output format of image file
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.ParseBBOX(System.String)">
            <summary>
            Parses a boundingbox string to a boundingbox geometry from the format minx,miny,maxx,maxy. Returns null if the format is invalid
            </summary>
            <param name="strBBOX">string representation of a boundingbox</param>
            <returns>Boundingbox or null if invalid parameter</returns>
        </member>
        <member name="M:SharpMap.Utilities.Algorithms.IsCCW(SharpMap.Geometries.LinearRing)">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <param name="ring">Ring to test.</param>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Unit">
            <summary>
            Class for defining units
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Unit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new unit
            </summary>
            <param name="conversionFactor">Conversion factor to base unit</param>
            <param name="name">Name of unit</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Unit.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new unit
            </summary>
            <param name="name">Name of unit</param>
            <param name="conversionFactor">Conversion factor to base unit</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Unit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Unit.ConversionFactor">
            <summary>
            Gets or sets the number of units per base-unit.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Unit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Unit.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projections.TransverseMercator">
            <summary>
            Summary description for MathTransform.
            </summary>
            <remarks>
            <para>Universal (UTM) and Modified (MTM) Transverses Mercator projections. This
            is a cylindrical projection, in which the cylinder has been rotated 90°.
            Instead of being tangent to the equator (or to an other standard latitude),
            it is tangent to a central meridian. Deformation are more important as we
            are going futher from the central meridian. The Transverse Mercator
            projection is appropriate for region wich have a greater extent north-south
            than east-west.</para>
            
            <para>Reference: John P. Snyder (Map Projections - A Working Manual,
                       U.S. Geological Survey Professional Paper 1395, 1987)</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an TransverseMercatorProjection projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Creates an instance of an TransverseMercatorProjection projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Flag indicating wether is a forward/projection (false) or an inverse projection (true).</param>
            <remarks>
            <list type="bullet">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>semi_major</term><description>Semi major radius</description></item>
            <item><term>semi_minor</term><description>Semi minor radius</description></item>
            <item><term>scale_factor</term><description></description></item>
            <item><term>central meridian</term><description></description></item>
            <item><term>latitude_origin</term><description></description></item>
            <item><term>false_easting</term><description></description></item>
            <item><term>false_northing</term><description></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.TransverseMercator.DegreesToMeters(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.TransverseMercator.MetersToDegrees(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.TransverseMercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projections.Mercator">
            <summary>
            Implements the Mercator projection.
            </summary>
            <remarks>
            <para>This map projection introduced in 1569 by Gerardus Mercator. It is often described as a cylindrical projection,
            but it must be derived mathematically. The meridians are equally spaced, parallel vertical lines, and the
            parallels of latitude are parallel, horizontal straight lines, spaced farther and farther apart as their distance
            from the Equator increases. This projection is widely used for navigation charts, because any straight line
            on a Mercator-projection map is a line of constant true bearing that enables a navigator to plot a straight-line
            course. It is less practical for world maps because the scale is distorted; areas farther away from the equator
            appear disproportionately large. On a Mercator projection, for example, the landmass of Greenland appears to be
            greater than that of the continent of South America; in actual area, Greenland is smaller than the Arabian Peninsula.
            </para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Initializes the MercatorProjection object with the specified parameters to project points. 
            </summary>
            <param name="parameters">ParameterList with the required parameters.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes the MercatorProjection object with the specified parameters.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>central_meridian</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>latitude_of_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.Mercator.DegreesToMeters(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>longitude_of_natural_origin</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).  Sometimes known as ""central meridian""."</description></item>
            <item><term>latitude_of_natural_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor_at_natural_origin</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate .</description></item>
            </list>
            </remarks>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.Mercator.MetersToDegrees(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.Mercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.DatumType">
            <summary>
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N) through
            the equation: H=h-N.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.HD_Min">
            <summary>
            Lowest possible value for horizontal datum types
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.HD_Other">
            <summary>
            Unspecified horizontal datum type. Horizontal datums with this type should never
            supply a conversion to WGS84 using Bursa Wolf parameters.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.HD_Classic">
            <summary>
            These datums, such as ED50, NAD27 and NAD83, have been designed to support
            horizontal positions on the ellipsoid as opposed to positions in 3-D space. These datums were designed mainly to support a horizontal component of a position in a domain of limited extent, such as a country, a region or a continent.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.HD_Geocentric">
            <summary>
            A geocentric datum is a "satellite age" modern geodetic datum mainly of global
            extent, such as WGS84 (used in GPS), PZ90 (used in GLONASS) and ITRF. These
            datums were designed to support both a horizontal component of position and 
            a vertical component of position (through ellipsoidal heights). The regional
            realizations of ITRF, such as ETRF, are also included in this category.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.HD_Max">
            <summary>
            Highest possible value for horizontal datum types.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Min">
            <summary>
            Lowest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Other">
            <summary>
            Unspecified vertical datum type.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Orthometric">
            <summary>
            A vertical datum for orthometric heights that are measured along the plumb line.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Ellipsoidal">
            <summary>
            A vertical datum for ellipsoidal heights that are measured along the normal to
            the ellipsoid used in the definition of horizontal datum.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_AltitudeBarometric">
            <summary>
            The vertical datum of altitudes or heights in the atmosphere. These are
            approximations of orthometric heights obtained with the help of a barometer or
            a barometric altimeter. These values are usually expressed in one of the
            following units: meters, feet, millibars (used to measure pressure levels), or
            theta value (units used to measure geopotential height).
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Normal">
            <summary>
            A normal height system.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_GeoidModelDerived">
            <summary>
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N) 
            through the equation: H=h-N.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Depth">
            <summary>
            This attribute is used to support the set of datums generated for hydrographic
            engineering projects where depth measurements below sea level are needed. It is
            often called a hydrographic or a marine datum. Depths are measured in the 
            direction perpendicular (approximately) to the actual equipotential surfaces of
            the earth's gravity field, using such procedures as echo-sounding.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.VD_Max">
            <summary>
            Highest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.LD_Min">
            <summary>
            Lowest possible value for local datum types.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.DatumType.LD_Max">
            <summary>
            Highest possible value for local datum types.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.CoordinateSystemFactory">
            <summary>
            Builds up complex objects from simpler objects or values.
            </summary>
            <remarks>
            <para>ICoordinateSystemFactory allows applications to make coordinate systems that 
            cannot be created by a <see cref="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. This factory is very 
            flexible, whereas the authority factory is easier to use.</para>
            <para>So <see cref="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>can be used to make 'standard' coordinate 
            systems, and <see cref="T:SharpMap.CoordinateSystems.CoordinateSystemFactory"/> can be used to make 'special' 
            coordinate systems.</para>
            <para>For example, the EPSG authority has codes for USA state plane coordinate systems 
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not 
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.</para>
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ICoordinateSystemFactory">
            <summary>
            Builds up complex objects from simpler objects or values.
            </summary>
            <remarks>
            <para>ICoordinateSystemFactory allows applications to make coordinate systems that 
            cannot be created by a <see cref="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. This factory is very 
            flexible, whereas the authority factory is easier to use.</para>
            <para>So <see cref="T:SharpMap.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>can be used to make 'standard' coordinate 
            systems, and <see cref="T:SharpMap.CoordinateSystems.CoordinateSystemFactory"/> can be used to make 'special' 
            coordinate systems.</para>
            <para>For example, the EPSG authority has codes for USA state plane coordinate systems 
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not 
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateCompoundCoordinateSystem(System.String,SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ICompoundCoordinateSystem"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system</param>
            <param name="tail">Tail coordinate system</param>
            <returns>Compound coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:SharpMap.CoordinateSystems.IEllipsoid"/> from radius values.
            </summary>
            <seealso cref="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateFittedCoordinateSystem(System.String,SharpMap.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg,lon_deg,height_feet) system can be rotated in the 
            (lat,lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.</remarks>
            <param name="name">Name of coordinate system</param>
            <param name="baseCoordinateSystem">Base coordinate system</param>
            <param name="toBaseWkt"></param>
            <param name="arAxes"></param>
            <returns>Fitted coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:SharpMap.CoordinateSystems.IEllipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML string.
            </summary>
            <param name="xml">XML representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-known text representation.
            The output object may be either a <see cref="T:SharpMap.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:SharpMap.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="WKT">The Well-known text representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateGeographicCoordinateSystem(System.String,SharpMap.CoordinateSystems.IAngularUnit,SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.IPrimeMeridian,SharpMap.CoordinateSystems.AxisInfo,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IGeographicCoordinateSystem"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateHorizontalDatum(System.String,SharpMap.CoordinateSystems.DatumType,SharpMap.CoordinateSystems.IEllipsoid,SharpMap.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Creates <see cref="T:SharpMap.CoordinateSystems.IHorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:SharpMap.CoordinateSystems.DatumType">horizontalDatumType</see> of <see cref="F:SharpMap.CoordinateSystems.DatumType.HD_Other"/>, or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateLocalCoordinateSystem(System.String,SharpMap.CoordinateSystems.ILocalDatum,SharpMap.CoordinateSystems.IUnit,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ILocalCoordinateSystem">local coordinate system</see>.
            </summary>
            <remarks>
             The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system</param>
            <param name="datum">Local datum</param>
            <param name="unit">Units</param>
            <param name="axes">Axis info</param>
            <returns>Local coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateLocalDatum(System.String,SharpMap.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Datum type</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreatePrimeMeridian(System.String,SharpMap.CoordinateSystems.IAngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IPrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateProjectedCoordinateSystem(System.String,SharpMap.CoordinateSystems.IGeographicCoordinateSystem,SharpMap.CoordinateSystems.IProjection,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.AxisInfo,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IProjectedCoordinateSystem"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IProjection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="Parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalCoordinateSystem(System.String,SharpMap.CoordinateSystems.IVerticalDatum,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IVerticalCoordinateSystem"/> from a <see cref="T:SharpMap.CoordinateSystems.IVerticalDatum">datum</see> and <see cref="T:SharpMap.CoordinateSystems.ILinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system</param>
            <param name="datum">Vertical datum</param>
            <param name="verticalUnit">Unit</param>
            <param name="axis">Axis info</param>
            <returns>Vertical coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalDatum(System.String,SharpMap.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Type of datum</param>
            <returns>Vertical datum</returns>	
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML string.
            </summary>
            <param name="xml">XML representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-known text representation.
            The output object may be either a <see cref="T:SharpMap.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:SharpMap.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="WKT">The Well-known text representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateCompoundCoordinateSystem(System.String,SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ICompoundCoordinateSystem"/> [NOT IMPLEMENTED].
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system</param>
            <param name="tail">Tail coordinate system</param>
            <returns>Compound coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateFittedCoordinateSystem(System.String,SharpMap.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg,lon_deg,height_feet) system can be rotated in the 
            (lat,lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.</remarks>
            <param name="name">Name of coordinate system</param>
            <param name="baseCoordinateSystem">Base coordinate system</param>
            <param name="toBaseWkt"></param>
            <param name="arAxes"></param>
            <returns>Fitted coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateLocalCoordinateSystem(System.String,SharpMap.CoordinateSystems.ILocalDatum,SharpMap.CoordinateSystems.IUnit,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ILocalCoordinateSystem">local coordinate system</see>.
            </summary>
            <remarks>
             The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system</param>
            <param name="datum">Local datum</param>
            <param name="unit">Units</param>
            <param name="axes">Axis info</param>
            <returns>Local coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:SharpMap.CoordinateSystems.Ellipsoid"/> from radius values.
            </summary>
            <seealso cref="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:SharpMap.CoordinateSystems.Ellipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,SharpMap.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateProjectedCoordinateSystem(System.String,SharpMap.CoordinateSystems.IGeographicCoordinateSystem,SharpMap.CoordinateSystems.IProjection,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.AxisInfo,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ProjectedCoordinateSystem"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.Projection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateHorizontalDatum(System.String,SharpMap.CoordinateSystems.DatumType,SharpMap.CoordinateSystems.IEllipsoid,SharpMap.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Creates <see cref="T:SharpMap.CoordinateSystems.HorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:SharpMap.CoordinateSystems.DatumType">horizontalDatumType</see> of <see cref="F:SharpMap.CoordinateSystems.DatumType.HD_Other"/>, or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreatePrimeMeridian(System.String,SharpMap.CoordinateSystems.IAngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.PrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateGeographicCoordinateSystem(System.String,SharpMap.CoordinateSystems.IAngularUnit,SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.IPrimeMeridian,SharpMap.CoordinateSystems.AxisInfo,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.GeographicCoordinateSystem"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateLocalDatum(System.String,SharpMap.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Datum type</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateVerticalDatum(System.String,SharpMap.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Type of datum</param>
            <returns>Vertical datum</returns>	
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateVerticalCoordinateSystem(System.String,SharpMap.CoordinateSystems.IVerticalDatum,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:SharpMap.CoordinateSystems.IVerticalCoordinateSystem"/> from a <see cref="T:SharpMap.CoordinateSystems.IVerticalDatum">datum</see> and <see cref="T:SharpMap.CoordinateSystems.LinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system</param>
            <param name="datum">Vertical datum</param>
            <param name="verticalUnit">Unit</param>
            <param name="axis">Axis info</param>
            <returns>Vertical coordinate system</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.IPrimeMeridian)">
            <summary>
            Creates a <see cref="M:SharpMap.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.IPrimeMeridian)"/> from a <see cref="T:SharpMap.CoordinateSystems.IHorizontalDatum">datum</see>, 
            <see cref="T:SharpMap.CoordinateSystems.ILinearUnit">linear unit</see> and <see cref="T:SharpMap.CoordinateSystems.IPrimeMeridian"/>.
            </summary>
            <param name="name">Name of geocentric coordinate system</param>
            <param name="datum">Horizontal datum</param>
            <param name="linearUnit">Linear unit</param>
            <param name="primeMeridian">Prime meridian</param>
            <returns>Geocentric Coordinate System</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryToWKT">
            <summary>
            Outputs the textual representation of a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A Geometry to write.</param>
            <returns>A &lt;Geometry Tagged Text&gt; string (see the OpenGIS Simple
             Features Specification)</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A geometry to process.</param>
            <param name="writer">Stream to write out the geometry's text representation.</param>
            <remarks>
            Geometry is written to the output stream as &lt;Gemoetry Tagged Text&gt; string (see the OpenGIS
            Simple Features Specification).
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryTaggedText(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to &lt;Geometry Tagged Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometry">The Geometry to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointTaggedText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point Tagged Text&gt; format,
            then Appends it to the writer.
            </summary>
            <param name="coordinate">the <code>Coordinate</code> to process</param>
            <param name="writer">the output writer to Append to</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringTaggedText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to LineString tagged text format, 
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonTaggedText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
             Converts a Polygon to &lt;Polygon Tagged Text&gt; format,
             then Appends it to the writer.
            </summary>
            <param name="polygon">Th Polygon to process.</param>
            <param name="writer">The stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointTaggedText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Tagged Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multipoint">The MultiPoint to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringTaggedText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonTaggedText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionTaggedText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to Point Text format then Appends it to the writer.
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendCoordinate(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point&gt; format, then Appends
            it to the writer. 
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.WriteNumber(System.Double)">
            <summary>
            Converts a double to a string, not in scientific notation.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>The double as a string, not in scientific notation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to &lt;LineString Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
            Converts a Polygon to &lt;Polygon Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="polygon">The Polygon to process.</param>
            <param name="writer"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="multiPoint">The MultiPoint to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Text&gt; format, then Appends to it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="T:SharpMap.Geometries.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in 2D coordinate space. A Point has a x coordinate
            value and a y-coordinate value. The boundary of a Point is the empty set.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor">
            <summary>
            Initializes a new empty Point
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.FromDMS(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a point based on degrees, minutes and seconds notation.
            For western or southern coordinates, add minus '-' in front of all longitude and/or latitude values
            </summary>
            <param name="longDegrees">Longitude degrees</param>
            <param name="longMinutes">Longitude minutes</param>
            <param name="longSeconds">Longitude seconds</param>
            <param name="latDegrees">Latitude degrees</param>
            <param name="latMinutes">Latitude minutes</param>
            <param name="latSeconds">Latitude seconds</param>
            <returns>Point</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.AsPoint">
            <summary>
            Returns a 2D <see cref="T:SharpMap.Geometries.Point"/> instance from this <see cref="T:SharpMap.Geometries.Point3D"/>
            </summary>
            <returns><see cref="T:SharpMap.Geometries.Point"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the point to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Addition(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector + Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Subtraction(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector - Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Multiply(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Vector * Scalar
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Equals(SharpMap.Geometries.Point)">
            <summary>
            Checks whether this instance is spatially equal to the Point 'o'
            </summary>
            <param name="p">Point to compare to</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Point.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Point.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsSimple">
            <summary>
            Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Boundary">
            <summary>
            The boundary of a point is the empty set.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the distance between this geometry instance and another geometry, as
            measured in the spatial reference system of this instance.
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Distance(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns the distance between this point and a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Touches(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether this point touches a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box">box</param>
            <returns>true if they touch</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Checks whether this point touches another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <param name="geom">Geometry</param>
            <returns>true if they touch</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Intersects(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether this point intersects a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box">Box</param>
            <returns>True if they intersect</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this instance contains 'geom'
            </summary>
            <param name="geom">Geometry</param>
            <returns>True if geom is contained by this instance</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.CompareTo(SharpMap.Geometries.Point)">
            <summary>
            Comparator used for ordering point first by ascending X, then by ascending Y.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.SetIsEmpty">
            <summary>
            Sets whether this object is empty
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.X">
            <summary>
            Gets or sets the X coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Y">
            <summary>
            Gets or sets the Y coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Item(System.UInt32)">
            <summary>
            Returns part of coordinate. Index 0 = X, Index 1 = Y
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.NumOrdinates">
            <summary>
            Returns the number of ordinates for this point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.OleDbPoint">
            <summary>
            The OleDbPoint provider is used for rendering point data from an OleDb compatible datasource.
            </summary>
            <remarks>
            <para>The data source will need to have two double-type columns, xColumn and yColumn that contains the coordinates of the point,
            and an integer-type column containing a unique identifier for each row.</para>
            <para>To get good performance, make sure you have applied indexes on ID, xColumn and yColumns in your datasource table.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OleDbPoint provider
            </summary>
            <param name="ConnectionStr"></param>
            <param name="tablename"></param>
            <param name="OID_ColumnName"></param>
            <param name="xColumn"></param>
            <param name="yColumn"></param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws NotSupportedException. 
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>Total number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="RowID"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.XColumn">
            <summary>
            Name of column that contains X coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.YColumn">
            <summary>
            Name of column that contains Y coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.DomainFlags">
            <summary>
            Flags indicating parts of domain covered by a convex hull. 
            </summary>
            <remarks>
            These flags can be combined. For example, the value 3 
            corresponds to a combination of <see cref="F:SharpMap.CoordinateSystems.Transformations.DomainFlags.Inside"/> and <see cref="F:SharpMap.CoordinateSystems.Transformations.DomainFlags.Outside"/>,
            which means that some parts of the convex hull are inside the 
            domain, and some parts of the convex hull are outside the domain.
            </remarks>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.DomainFlags.Inside">
            <summary>
            At least one point in a convex hull is inside the transform's domain.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.DomainFlags.Outside">
            <summary>
            At least one point in a convex hull is outside the transform's domain.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.DomainFlags.Discontinuous">
            <summary>
            At least one point in a convex hull is not transformed continuously.
            </summary>
            <remarks>
            As an example, consider a "Longitude_Rotation" transform which adjusts 
            longitude coordinates to take account of a change in Prime Meridian. If
            the rotation is 5 degrees east, then the point (Lat=175,Lon=0) is not 
            transformed continuously, since it is on the meridian line which will 
            be split at +180/-180 degrees.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.CoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.ICoordinateTransformationFactory.CreateFromCoordinateSystems(SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between 
            the coordinate systems is found, using the normal failing behavior of 
            the DCP (e.g. throwing an exception).</remarks>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateFromCoordinateSystems(SharpMap.CoordinateSystems.ICoordinateSystem,SharpMap.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between 
            the coordinate systems is found, using the normal failing behavior of 
            the DCP (e.g. throwing an exception).</remarks>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <returns></returns>		
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeog2Geog(SharpMap.CoordinateSystems.IGeographicCoordinateSystem,SharpMap.CoordinateSystems.IGeographicCoordinateSystem)">
            <summary>
            Geographic to geographic transformation
            </summary>
            <remarks>Adds a datum shift if nessesary</remarks>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeoc2Geoc(SharpMap.CoordinateSystems.IGeocentricCoordinateSystem,SharpMap.CoordinateSystems.IGeocentricCoordinateSystem)">
            <summary>
            Geocentric to Geocentric transformation
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projections.AlbersProjection">
            <summary>
            	Implements the Albers projection.
            </summary>
            <remarks>
            	<para>Implements the Albers projection. The Albers projection is most commonly
            	used to project the United States of America. It gives the northern
            	border with Canada a curved appearance.</para>
            	
            	<para>The <a href="http://www.geog.mcgill.ca/courses/geo201/mapproj/naaeana.gif">Albers Equal Area</a>
            	projection has the property that the area bounded
            	by any pair of parallels and meridians is exactly reproduced between the 
            	image of those parallels and meridians in the projected domain, that is,
            	the projection preserves the correct area of the earth though distorts
            	direction, distance and shape somewhat.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_center</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_center</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.AlbersProjection.DegreesToMeters(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.AlbersProjection.MetersToDegrees(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projections.AlbersProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IVerticalCoordinateSystem">
            <summary>
            A one-dimensional coordinate system suitable for vertical measurements.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IVerticalCoordinateSystem.VerticalDatum">
            <summary>
            Gets the vertical datum, which indicates the measurement method
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IVerticalCoordinateSystem.VerticalUnit">
            <summary>
            Gets the units used along the vertical axis.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.AxisOrientationEnum">
            <summary>
            Orientation of axis. Some coordinate systems use non-standard orientations. 
            For example, the first axis in South African grids usually points West, 
            instead of East. This information is obviously relevant for algorithms
            converting South African grid coordinates into Lat/Long.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.Other">
            <summary>
            Unknown or unspecified axis orientation. This can be used for local or fitted coordinate systems.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.North">
            <summary>
            Increasing ordinates values go North. This is usually used for Grid Y coordinates and Latitude.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.South">
            <summary>
            Increasing ordinates values go South. This is rarely used.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.East">
            <summary>
            Increasing ordinates values go East. This is rarely used.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.West">
            <summary>
            Increasing ordinates values go West. This is usually used for Grid X coordinates and Longitude.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.Up">
            <summary>
            Increasing ordinates values go up. This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.AxisOrientationEnum.Down">
            <summary>
            Increasing ordinates values go down. This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection">
            <summary>
            Class defining delegate for label collision detection and static predefined methods
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.SimpleCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.Label})">
            <summary>
            Simple and fast label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.ThoroughCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.Label})">
            <summary>
            Thorough label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection.LabelFilterMethod">
            <summary>
            Delegate method for filtering labels. Useful for performing custom collision detection on labels
            </summary>
            <param name="labels"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Geometries.Point3D">
            <summary>
            A Point3D is a 0-dimensional geometry and represents a single location in 3D coordinate space. A Point3D has a x coordinate
            value, a y-coordinate value and a z-coordinate value. The boundary of a Point3D is the empty set.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="p">2D Point</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor">
            <summary>
            Initializes a new Point at (0,0)
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Addition(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Vector + Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Subtraction(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Vector - Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Multiply(SharpMap.Geometries.Point3D,System.Double)">
            <summary>
            Vector * Scalar
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Equals(SharpMap.Geometries.Point3D)">
            <summary>
            Checks whether this instance is spatially equal to the Point 'o'
            </summary>
            <param name="p">Point to compare to</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Point3D.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Point3D.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the distance between this geometry instance and another geometry, as
            measured in the spatial reference system of this instance.
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Equals(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Checks whether the two points are spatially equal
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <returns>true if the points a spatially equal</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.CompareTo(SharpMap.Geometries.Point3D)">
            <summary>
            Comparator used for ordering point first by ascending X, then by ascending Y and then by ascending Z.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.Z">
            <summary>
            Gets or sets the Z coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.Item(System.UInt32)">
            <summary>
            Returns part of coordinate. Index 0 = X, Index 1 = Y, , Index 2 = Z
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.NumOrdinates">
            <summary>
            Returns the number of ordinates for this point
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryProvider">
            <summary>
            Datasource for storing a limited set of geometries.
            </summary>
            <remarks>
            <para>The GeometryProvider doesn’t utilize performance optimizations of spatial indexing,
            and thus is primarily meant for rendering a limited set of Geometries.</para>
            <para>A common use of the GeometryProvider is for highlighting a set of selected features.</para>
            <example>
            The following example gets data within a BoundingBox of another datasource and adds it to the map.
            <code lang="C#">
            List&#60;Geometry&#62; geometries = myMap.Layers[0].DataSource.GetGeometriesInView(myBox);
            VectorLayer laySelected = new VectorLayer("Selected Features");
            laySelected.DataSource = new GeometryProvider(geometries);
            laySelected.Style.Outline = new Pen(Color.Magenta, 3f);
            laySelected.Style.EnableOutline = true;
            myMap.Layers.Add(laySelected);
            </code>
            </example>
            <example>
            Adding points of interest to the map. This is useful for vehicle tracking etc.
            <code lang="C#">
            List&#60;SharpMap.Geometries.Geometry&#62; geometries = new List&#60;SharpMap.Geometries.Geometry&#62;();
            //Add two points
            geometries.Add(new SharpMap.Geometries.Point(23.345,64.325));
            geometries.Add(new SharpMap.Geometries.Point(23.879,64.194));
            SharpMap.Layers.VectorLayer layerVehicles = new SharpMap.Layers.VectorLayer("Vechicles");
            layerVehicles.DataSource = new SharpMap.Data.Providers.GeometryProvider(geometries);
            layerVehicles.Style.Symbol = Bitmap.FromFile(@"C:\data\car.gif");
            myMap.Layers.Add(layerVehicles);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometries">Set of geometries that this datasource should contain</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="feature">Feature to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="features">Features to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Geometries.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometry">Geometry to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownBinaryGeometry"><see cref="T:SharpMap.Geometries.Geometry"/> as Well-known Binary to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownTextGeometry"><see cref="T:SharpMap.Geometries.Geometry"/> as Well-known Text to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns all objects whose boundingbox intersects 'bbox'.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="box"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeature(System.UInt32)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="RowID"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.Geometries">
            <summary>
            Gets or sets the geometries this datasource contains
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The ConnectionID is meant for Connection Pooling which doesn't apply to this datasource. Instead
            <c>String.Empty</c> is returned.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataSet">
            <summary>
            Represents an in-memory cache of spatial data. The FeatureDataSet is an extension of System.Data.DataSet
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            nitializes a new instance of the FeatureDataSet class.
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.Clone">
            <summary>
            Copies the structure of the FeatureDataSet, including all FeatureDataTable schemas, relations, and constraints. Does not copy any data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeTables">
            <summary>
            Gets a value indicating whether Tables property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeRelations">
            <summary>
            Gets a value indicating whether Relations property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ReadXmlSerializable(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.GetSchemaSerializable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.FeatureDataSet.Tables">
            <summary>
            Gets the collection of tables contained in the FeatureDataSet
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventHandler">
            <summary>
            Represents the method that will handle the RowChanging, RowChanged, RowDeleting, and RowDeleted events of a FeatureDataTable. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTable">
            <summary>
            Represents one feature table of in-memory spatial data. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataTable class with no arguments.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Intitalizes a new instance of the FeatureDataTable class with the specified table name.
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.AddRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Adds a row to the FeatureDataTable
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetEnumerator">
            <summary>
            Returns an enumerator for enumering the rows of the FeatureDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Clone">
            <summary>
            Clones the structure of the FeatureDataTable, including all FeatureDataTable schemas and constraints. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.CreateInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRow">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table, based on a datarow builder
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetRowType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanged event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanging event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleting event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.RemoveRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Removes the row from the table
            </summary>
            <param name="row">Row to remove</param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Count">
            <summary>
            Gets the number of rows in the table
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Item(System.Int32)">
            <summary>
            Gets the feature data row at the specified index
            </summary>
            <param name="index">row index</param>
            <returns>FeatureDataRow</returns>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanged">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanging">
            <summary>
            Occurs when a FeatureDataRow is changing. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleted">
            <summary>
            Occurs after a row in the table has been deleted.
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleting">
            <summary>
            Occurs before a row in the table is about to be deleted.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Rows">
            <summary>
            Gets the collection of rows that belong to this table.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureTableCollection">
            <summary>
            Represents the collection of tables for the FeatureDataSet.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRow">
            <summary>
            Represents a row of data in a FeatureDataTable.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.IsFeatureGeometryNull">
            <summary>
            Returns true of the geometry is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.SetFeatureGeometryNull">
            <summary>
            Sets the geometry column to null
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Geometry">
            <summary>
            The geometry of the current feature
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventArgs">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRowChangeEventArgs.#ctor(SharpMap.Data.FeatureDataRow,System.Data.DataRowAction)">
            <summary>
            Initializes a new instance of the FeatureDataRowChangeEventArgs class.
            </summary>
            <param name="row"></param>
            <param name="action"></param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Row">
            <summary>
            Gets the row upon which an action has occurred.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Action">
            <summary>
            Gets the action that has occurred on a FeatureDataRow.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IParameterInfo">
            <summary>
            The IParameterInfo interface provides an interface through which clients of a
            Projected Coordinate System or of a Projection can set the parameters of the
            projection. It provides a generic interface for discovering the names and default
            values of parameters, and for setting and getting parameter values. Subclasses of
            this interface may provide projection specific parameter access methods.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IParameterInfo.DefaultParameters">
            <summary>
            Returns the default parameters for this projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.IParameterInfo.GetParameterByName(System.String)">
            <summary>
            Gets the parameter by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IParameterInfo.NumParameters">
            <summary>
            Gets the number of parameters expected.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IParameterInfo.Parameters">
            <summary>
            Gets or sets the parameters set for this projection.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ICompoundCoordinateSystem">
            <summary>
            An aggregate of two coordinate systems (CRS). One of these is usually a 
            CRS based on a two dimensional coordinate system such as a geographic or
            a projected coordinate system with a horizontal datum. The other is a 
            vertical CRS which is a one-dimensional coordinate system with a vertical
            datum.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICompoundCoordinateSystem.HeadCS">
            <summary>
            Gets first sub-coordinate system.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ICompoundCoordinateSystem.TailCS">
            <summary>
            Gets second sub-coordinate system.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Ellipsoid">
            <summary>
            The IEllipsoid interface defines the standard information stored with ellipsoid objects.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IEllipsoid">
            <summary>
            The IEllipsoid interface defines the standard information stored with ellipsoid objects.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IEllipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IEllipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IEllipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IEllipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IEllipsoid.IsIvfDefinitive">
            <summary>
            Is the Inverse Flattening definitive for this ellipsoid? Some ellipsoids use the
            IVF as the defining value, and calculate the polar radius whenever asked. Other
            ellipsoids use the polar radius to calculate the IVF whenever asked. This
            distinction can be important to avoid floating-point rounding errors.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Ellipsoid.#ctor(System.Double,System.Double,System.Double,System.Boolean,SharpMap.CoordinateSystems.ILinearUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of an Ellipsoid
            </summary>
            <param name="semiMajorAxis">Semi major axis</param>
            <param name="semiMinorAxis">Semi minor axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="isIvfDefinitive">Inverse Flattening is definitive for this ellipsoid (Semi-minor axis will be overridden)</param>
            <param name="axisUnit">Axis unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Ellipsoid.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.WGS84">
            <summary>
            WGS 84 ellipsoid
            </summary>
            <remarks>
            Inverse flattening derived from four defining parameters 
            (semi-major axis;
            C20 = -484.16685*10e-6;
            earth's angular velocity w = 7292115e11 rad/sec;
            gravitational constant GM = 3986005e8 m*m*m/s/s).
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.WGS72">
            <summary>
            WGS 72 Ellipsoid
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.GRS80">
            <summary>
            GRS 1980 / International 1979 ellipsoid
            </summary>
            <remarks>
            Adopted by IUGG 1979 Canberra.
            Inverse flattening is derived from
            geocentric gravitational constant GM = 3986005e8 m*m*m/s/s;
            dynamic form factor J2 = 108263e8 and Earth's angular velocity = 7292115e-11 rad/s.")
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.International1924">
            <summary>
            International 1924 / Hayford 1909 ellipsoid
            </summary>
            <remarks>
            Described as a=6378388 m. and b=6356909m. from which 1/f derived to be 296.95926. 
            The figure was adopted as the International ellipsoid in 1924 but with 1/f taken as
            297 exactly from which b is derived as 6356911.946m.
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.Clarke1880">
            <summary>
            Clarke 1880
            </summary>
            <remarks>
            Clarke gave a and b and also 1/f=293.465 (to 3 decimal places).  1/f derived from a and b = 293.4663077
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.Clarke1866">
            <summary>
            Clarke 1866
            </summary>
            <remarks>
            Original definition a=20926062 and b=20855121 (British) feet. Uses Clarke's 1865 inch-metre ratio of 39.370432 to obtain metres. (Metric value then converted to US survey feet for use in the United States using 39.37 exactly giving a=20925832.16 ft US).
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.Sphere">
            <summary>
            Sphere
            </summary>
            <remarks>
            Authalic sphere derived from GRS 1980 ellipsoid (code 7019).  (An authalic sphere is
            one with a surface area equal to the surface area of the ellipsoid). 1/f is infinite.
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.IsIvfDefinitive">
            <summary>
            Tells if the Inverse Flattening is definitive for this ellipsoid. Some ellipsoids use 
            the IVF as the defining value, and calculate the polar radius whenever asked. Other
            ellipsoids use the polar radius to calculate the IVF whenever asked. This 
            distinction can be important to avoid floating-point rounding errors.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Ellipsoid.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.AxisInfo">
            <summary>
            Details of axis. This is used to label axes, and indicate the orientation.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.AxisInfo.#ctor(System.String,SharpMap.CoordinateSystems.AxisOrientationEnum)">
            <summary>
            Initializes a new instance of an AxisInfo.
            </summary>
            <param name="name">Name of axis</param>
            <param name="orientation">Axis orientation</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AxisInfo.Name">
            <summary>
            Human readable name for axis. Possible values are X, Y, Long, Lat or any other short string.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AxisInfo.Orientation">
            <summary>
            Gets enumerated value for orientation.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AxisInfo.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AxisInfo.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryFromWKB">
            <summary>
             Converts Well-known Binary representations to a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:SharpMap.Geometries.Geometry"/> value as a contiguous stream of bytes. It permits <see cref="T:SharpMap.Geometries.Geometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> is obtained by serializing a <see cref="T:SharpMap.Geometries.Geometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> from the supplied byte[] containing the Well-known Binary representation.
            </summary>
            <param name="bytes">byte[] containing the Well-known Binary representation.</param>
            <returns>A <see cref="T:SharpMap.Geometries.Geometry"/> bases on the supplied Well-known Binary representation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.IO.BinaryReader)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on the Well-known binary representation.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader">BinaryReader</see> used to read the Well-known binary representation.</param>
            <returns>A <see cref="T:SharpMap.Geometries.Geometry"/> based on the Well-known binary representation.</returns>
        </member>
        <member name="T:SharpMap.CoordinateSystems.PrimeMeridian">
            <summary>
            A meridian used to take longitude measurements from.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.PrimeMeridian.#ctor(System.Double,SharpMap.CoordinateSystems.IAngularUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a prime meridian
            </summary>
            <param name="longitude">Longitude of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.PrimeMeridian.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Greenwich">
            <summary>
            Greenwich prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Lisbon">
            <summary>
            Lisbon prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Paris">
            <summary>
            Paris prime meridian.
            Value adopted by IGN (Paris) in 1936. Equivalent to 2 deg 20min 14.025sec. Preferred by EPSG to earlier value of 2deg 20min 13.95sec (2.596898 grads) used by RGS London.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Bogota">
            <summary>
            Bogota prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Madrid">
            <summary>
            Madrid prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Rome">
            <summary>
            Rome prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Bern">
            <summary>
            Bern prime meridian.
            1895 value. Newer value of 7 deg 26 min 22.335 sec E determined in 1938.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Jakarta">
            <summary>
            Jakarta prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Ferro">
            <summary>
            Ferro prime meridian.
            Used in Austria and former Czechoslovakia.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Brussels">
            <summary>
            Brussels prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Stockholm">
            <summary>
            Stockholm prime meridian
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Athens">
            <summary>
            Athens prime meridian.
            Used in Greece for older mapping based on Hatt projection.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Oslo">
            <summary>
            Oslo prime meridian.
            Formerly known as Kristiania or Christiania.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.PrimeMeridian.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Parameter">
            <summary>
            A named parameter value.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Creates an instance of a parameter
            </summary>
            <remarks>Units are always either meters or degrees.</remarks>
            <param name="name">Name of parameter</param>
            <param name="value">Value</param>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Parameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Parameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.AngularUnit">
            <summary>
            Definition of angular units.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.IAngularUnit">
            <summary>
            The IAngularUnit interface defines methods on angular units.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.IAngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per angular unit.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.AngularUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a angular unit
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.AngularUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a angular unit
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.AngularUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.Degrees">
            <summary>
            The angular degrees are PI/180 = 0.017453292519943295769236907684886 radians
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.Radian">
            <summary>
            SI standard unit
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.Grad">
            <summary>
            Pi / 200 = 0.015707963267948966192313216916398 radians
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.Gon">
            <summary>
            Pi / 200 = 0.015707963267948966192313216916398 radians
            </summary>		
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per <see cref="T:SharpMap.CoordinateSystems.AngularUnit"/>.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.AngularUnit.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryFromWKT">
            <summary>
             Converts a Well-known Text representation to a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.String)">
            <summary>
            Converts a Well-known text representation to a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="wellKnownText">A <see cref="T:SharpMap.Geometries.Geometry"/> tagged text string ( see the OpenGIS Simple Features Specification.</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> specified by wellKnownText.  Throws an exception if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.IO.TextReader)">
            <summary>
            Converts a Well-known Text representation to a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="reader">A Reader which will return a Geometry Tagged Text
            string (see the OpenGIS Simple Features Specification)</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> read from StreamReader. 
            An exception will be thrown if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetCoordinates(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next array of Coordinates in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The
            next element returned by the stream should be "(" (the beginning of "(x1 y1, x2 y2, ..., xn yn)" or
            "EMPTY".</param>
            <returns>The next array of Coordinates in the stream, or an empty array of "EMPTY" is the
            next element returned by the stream.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextNumber(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known text format.  The next token
            must be a number.</param>
            <returns>Returns the next number in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not a number.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextEmptyOrOpener(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".</param>
            <returns>the next "EMPTY" or "(" in the stream as uppercase
            text.</returns>
            <remarks>
            ParseException is thrown if the next token is not "EMPTY" or "(".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloserOrComma(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".</param>
            <returns>Returns the next ")" or "," in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")" or ",".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloser(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".</param>
            <returns>Returns the next ")" in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextWord(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.</param>
            <returns>Returns the next word in the stream as uppercase text.</returns>
            <remarks>
            Exception is thrown if the next token is not a word.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryTaggedText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Geometry using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text&gt;.</param>
            <returns>Returns a Geometry specified by the next token in the stream.</returns>
            <remarks>
            Exception is thrown if the coordinates used to create a Polygon
            shell and holes do not form closed linestrings, or if an unexpected
            token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.MultiPolygon"/> using the next token in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a MultiPolygon.</param>
            <returns>a <code>MultiPolygon</code> specified by the next token in the 
            stream, or if if the coordinates used to create the <see cref="T:SharpMap.Geometries.Polygon"/>
            shells and holes do not form closed linestrings.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Polygon using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
             format. The next tokens must form a &lt;Polygon Text&gt;.</param>
            <returns>Returns a Polygon specified by the next token
             in the stream</returns>
             <remarks>
             ParseException is thown if the coordinates used to create the Polygon
             shell and holes do not form closed linestrings, or if an unexpected
             token is encountered.
             </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.MultiLineString"/> using the next token in the stream. 
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text format. The next tokens must form a MultiLineString Text</param>
            <returns>a <see cref="T:SharpMap.Geometries.MultiLineString"/> specified by the next token in the stream</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a LineString using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The next
            tokens must form a LineString Text.</param>
            <returns>Returns a LineString specified by the next token in the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryCollectionText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.GeometryCollection"/> using the next token in the stream.
            </summary>
            <param name="tokenizer"> Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a GeometryCollection Text.</param>
            <returns>
            A <see cref="T:SharpMap.Geometries.GeometryCollection"/> specified by the next token in the stream.</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.Client">
            <summary>
            Class for requesting and parsing a WMS servers capabilities
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.WebProxy)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.GetRemoteXml(System.String,System.Net.WebProxy)">
            <summary>
            Downloads servicedescription from WMS service
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapabilities(System.Xml.XmlDocument)">
            <summary>
            Parses a servicedescription and stores the data in the ServiceDescription property
            </summary>
            <param name="doc">XmlDocument containing a valid Service Description</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseServiceDescription(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlServiceDescription"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapability(System.Xml.XmlNode)">
            <summary>
            Parses capability node
            </summary>
            <param name="xnCapability"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseExceptions(System.Xml.XmlNode)">
            <summary>
            Parses valid exceptions
            </summary>
            <param name="xnlExceptionNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseRequest(System.Xml.XmlNode)">
            <summary>
            Parses request node
            </summary>
            <param name="xmlRequestNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseGetMapRequest(System.Xml.XmlNode)">
            <summary>
            Parses GetMap request nodes
            </summary>
            <param name="GetMapRequestNodes"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseLayer(System.Xml.XmlNode)">
            <summary>
            Iterates through the layer nodes recursively
            </summary>
            <param name="xmlLayer"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ServiceDescription">
            <summary>
            Gets the service description
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.WmsVersion">
            <summary>
            Gets the version of the WMS server (ex. "1.3.0")
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ExceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapRequests">
            <summary>
            Gets the available GetMap request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Layer">
            <summary>
            Gets the hiarchial layer structure
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsServerLayer">
            <summary>
            Structure for holding information about a WMS Layer 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Title">
            <summary>
            Layer title
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Name">
            <summary>
            Unique name of this layer used for requesting layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Queryable">
            <summary>
            Specifies whether this layer is queryable using GetFeatureInfo requests
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Style">
            <summary>
            List of styles supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.CRS">
            <summary>
            Coordinate Reference Systems supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.ChildLayers">
            <summary>
            Collection of child layers
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.LatLonBoundingBox">
            <summary>
            Latitudal/longitudal extent of this layer
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsLayerStyle">
            <summary>
            Structure for storing information about a WMS Layer Style
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.LegendUrl">
            <summary>
            Legend
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.StyleSheetUrl">
            <summary>
            Style Sheet Url
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsStyleLegend">
            <summary>
            Structure for storing WMS Legend information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.OnlineResource">
            <summary>
            Online resource for legend style 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.Size">
            <summary>
            Size of legend
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsOnlineResource">
            <summary>
            Structure for storing info on an Online Resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.Type">
            <summary>
            Type of online resource (Ex. request method 'Get' or 'Post')
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.OnlineResource">
            <summary>
            URI of online resource
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Version">
            <summary>
            Version information helper class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Version.GetCurrentVersion">
            <summary>
            Returns the current build version of SharpMap
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Styles.Style">
            <summary>
            Defines a style used for for defining layer styles
            </summary>
        </member>
        <member name="T:SharpMap.Styles.IStyle">
            <summary>
            Defines an interface for defining layer styles
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.Enabled">
            <summary>
            Gets or sets whether objects in this style is rendered or not
            </summary>
        </member>
        <member name="M:SharpMap.Styles.Style.#ctor">
            <summary>
            Initializes a style as sets Min=0, Max=double.MaxValue and Visible=true
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.Enabled">
            <summary>
            Specified whether style is rendered or not
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.Connector">
            <summary>
            The Connector class implements the logic for the Connection 
            Objects to access the physical connection to the data source, and 
            isolate the application developer from connection pooling 
            internals.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InstanceCounter">
            <summary>Instance Counting</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.Pooled">
            <summary>Buffer for the public Pooled property</summary>
            <remarks>Pooled will be ignored if Shared is set!</remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._Shared">
            <summary>Buffer for the public Shared property</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._ShareCount">
            <summary>Counts the numbers of Connections that share
            this Connector. Used in Release() to decide wether this
            connector is to be moved to the PooledConnectors list.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InUse">
            <summary>True if the physical connection is in used 
            by a Connection Object. That is, if the connector is
            not contained in the PooledConnectors List.</summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.#ctor(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Construcor, initializes the Connector object.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Shared">
            <summary>Controls the physical connection sharing.</summary>
            <remarks>Can only be set via ConnectorPool.Request().</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.ShareCount">
            <summary>Share count, read only</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Provider">
            <summary>
            Used to connect to the data source. 
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Projection">
            <summary>
            The Projection class defines the standard information stored with a projection
            objects. A projection object implements a coordinate transformation from a geographic
            coordinate system to a projected coordinate system, given the ellipsoid for the
            geographic coordinate system. It is expected that each coordinate transformation of
            interest, e.g., Transverse Mercator, Lambert, will be implemented as a class of
            type Projection, supporting the IProjection interface.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projection.GetParameter(System.Int32)">
            <summary>
            Gets an indexed parameter of the projection.
            </summary>
            <param name="n">Index of parameter</param>
            <returns>n'th parameter</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Projection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projection.NumParameters">
            <summary>
            Gets the number of parameters of the projection.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projection.Parameters">
            <summary>
            Gets or sets the parameters of the projection
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projection.ClassName">
            <summary>
            Gets the projection classification name (e.g. "Transverse_Mercator").
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projection.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.Projection.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.Web.Caching">
            <summary>
            Class for storing rendered images in the httpcache
            </summary>
        </member>
        <member name="M:SharpMap.Web.Caching.InsertIntoCache(System.Int32,System.Drawing.Image)">
            <summary>
            Inserts an image into the HttpCache and returns the cache identifier.
            </summary>
            <remarks>
            Image can after insertion into the cache be requested by calling getmap.aspx?ID=[identifier]<br/>
            This requires you to add the following to web.config:
            <code escaped="true">
            <httpHandlers>
               <add verb="*" path="GetMap.aspx" type="SharpMap.Web.HttpHandler,SharpMap"/>
            </httpHandlers>
            </code>
            <example>
            Inserting the map into the cache and setting the ImageUrl:
            <code>
            string imgID = SharpMap.Web.Caching.CacheMap(5, myMap.GetMap(), Session.SessionID, Context);
            imgMap.ImageUrl = "getmap.aspx?ID=" + HttpUtility.UrlEncode(imgID);
            </code>
            </example>
            </remarks>
            <param name="minutes">Number of minutes to cache the map</param>
            <param name="map">Map reference</param>
            <returns>Image identifier</returns>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2">
            <summary>
            The BinaryTree class are used for indexing values to enhance the speed of queries
            </summary>
            <typeparam name="T">Value type to be indexed</typeparam>
            <typeparam name="U">Value ID type</typeparam>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.#ctor">
            <summary>
            Initializes a new instance of the generic binary tree.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue[])">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue)">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.Node{`0,`1},SharpMap.Utilities.Indexing.Node{`0,`1})">
            <summary>
            Inserts a node into the tree
            </summary>
            <param name="newNode"></param>
            <param name="root"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Between(`0,`0)">
            <summary>
            Gets and enumerator for the values between min and max in ascending order
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.StartsWith(System.String)">
            <summary>
            Enumerates the objects whose string-representation starts with 'str'
            </summary>
            <param name="str"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Find(`0)">
            <summary>
            Enumerates all objects with the specified value
            </summary>
            <param name="value">Value to search for</param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.TraceTree">
            <summary>
            This is the classic computer science binary tree iteration 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.BinaryTree`2.InOrder">
            <summary>
            Gets an enumerator for all the values in the tree in ascending order
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue">
            <summary>
            A value in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Id">
            <summary>
            Identifier for the value
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.#ctor(`0,`1)">
            <summary>
            Creates an instance of an item in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
            <param name="value">Value</param>
            <param name="id">Identifier for the value</param>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme">
            <summary>
            The CustomTheme class is used for defining your own thematic rendering by using a custom get-style-delegate.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.#ctor(SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Rendering.Thematics.CustomTheme"/> class
            </summary>
            <param name="getStyleMethod"></param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the <see cref="T:System.Drawing.Color">color</see> based on an attribute value
            </summary>
            <param name="row">DataRow</param>
            <returns>Style generated by GetStyle-Delegate</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.DefaultStyle">
            <summary>
            Gets or sets the default style when an attribute isn't found in any bucket
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate">
            <summary>
            Gets or sets the style delegate used for determining the style of a feature
            </summary>
            <remarks>
            The delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <example>
            The example below creates a delegate that can be used for assigning the rendering of a road theme. If the road-class
            is larger than '3', it will be rendered using a thick red line.
            <code lang="C#">
            private static SharpMap.Styles.VectorStyle GetRoadStyle(SharpMap.Data.FeatureDataRow row)
            {
            	SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            	if(((int)row["RoadClass"])&gt;3)
            		style.Line = new Pen(Color.Red,5f);
            	else
            		style.Line = new Pen(Color.Black,1f);
            	return style;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod"/>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod">
            <summary>
            Custom Style Delegate method
            </summary>
            <remarks>
            The GetStyle delegate is used for determining the style of a feature using the <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate"/> property.
            The method must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <para>
            <example>
            The following example can used for highlighting all features where the attribute "NAME" starts with "S".
            <code lang="C#">
            SharpMap.Rendering.Thematics.CustomTheme iTheme = new SharpMap.Rendering.Thematics.CustomTheme(GetCustomStyle);
            SharpMap.Styles.VectorStyle defaultstyle = new SharpMap.Styles.VectorStyle(); //Create default renderstyle
            defaultstyle.Fill = Brushes.Gray;
            iTheme.DefaultStyle = defaultstyle;
            
            [...]
            
            //Set up delegate for determining fill-color.
            //Delegate will fill all objects with a yellow color where the attribute "NAME" starts with "S".
            private static SharpMap.Styles.VectorStyle GetCustomStyle(SharpMap.Data.FeatureDataRow row)
            {
            
            	if (row["NAME"].ToString().StartsWith("S"))
            	{
            		SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            		style.Fill = Brushes.Yellow;
            		return style;
            	}
            	else
            		return null; //Return null which will render the default style
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="dr">Feature</param>
            <returns>Style to be applied to feature</returns>
        </member>
        <member name="T:SharpMap.Geometries.BoundingBox">
            <summary>
            Bounding box type with double precision
            </summary>
            <remarks>
            The Bounding Box represents a box whose sides are parallel to the two axes of the coordinate system.
            </remarks>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a bounding box
            </summary>
            <remarks>
            In case min values are larger than max values, the parameters will be swapped to ensure correct min/max boundary
            </remarks>
            <param name="minX">left</param>
            <param name="minY">bottom</param>
            <param name="maxX">right</param>
            <param name="maxY">top</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Initializes a bounding box
            </summary>
            <param name="lowerLeft">Lower left corner</param>
            <param name="upperRight">Upper right corner</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.Generic.List{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of geometries
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.Generic.List{SharpMap.Geometries.BoundingBox})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of bounding boxes
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Offset(SharpMap.Geometries.Point)">
            <summary>
            Moves/translates the <see cref="T:SharpMap.Geometries.BoundingBox"/> along the the specified vector
            </summary>
            <param name="vector">Offset vector</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.CheckMinMax">
            <summary>
            Checks whether min values are actually smaller than max values and in that case swaps them.
            </summary>
            <returns>true if the bounding was changed</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersects(SharpMap.Geometries.BoundingBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this <see cref="T:SharpMap.Geometries.BoundingBox"/> intersects the geometry
            </summary>
            <param name="g">Geometry</param>
            <returns>True if intersects</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns true if this instance touches the <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="r"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this <see cref="T:SharpMap.Geometries.BoundingBox"/> touches the geometry
            </summary>
            <param name="s">Geometry</param>
            <returns>True if touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns true if this instance contains the <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="r"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it contains</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this instance contains the geometry
            </summary>
            <param name="s"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it contains</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.Point)">
            <summary>
            Returns true if this instance touches the <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
            <param name="p">Geometry</param>
            <returns>True if touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetArea">
            <summary>
            Returns the area of the BoundingBox
            </summary>
            <returns>Area of box</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetIntersectingArea(SharpMap.Geometries.BoundingBox)">
            <summary>
            Gets the intersecting area between two boundingboxes
            </summary>
            <param name="r">BoundingBox</param>
            <returns>Area</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox)">
            <summary>
            Computes the joined boundingbox of this instance and another boundingbox
            </summary>
            <param name="box">Boundingbox to join with</param>
            <returns>Boundingbox containing both boundingboxes</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox,SharpMap.Geometries.BoundingBox)">
            <summary>
            Computes the joined boundingbox of two boundingboxes
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox[])">
            <summary>
            Computes the joined <see cref="T:SharpMap.Geometries.BoundingBox"/> of an array of boundingboxes.
            </summary>
            <param name="boxes">Boxes to join</param>
            <returns>Combined BoundingBox</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Grow(System.Double)">
            <summary>
            Increases the size of the boundingbox by the givent amount in all directions
            </summary>
            <param name="amount">Amount to grow in all directions</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Grow(System.Double,System.Double)">
            <summary>
            Increases the size of the boundingbox by the givent amount in horizontal and vertical directions
            </summary>
            <param name="amountInX">Amount to grow in horizontal direction</param>
            <param name="amountInY">Amount to grow in vertical direction</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.Point)">
            <summary>
            Checks whether a point lies within the bounding box
            </summary>
            <param name="p">Point</param>
            <returns>true if point is within</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Distance(SharpMap.Geometries.BoundingBox)">
            <summary> 
            Computes the minimum distance between this and another <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            The distance between overlapping bounding boxes is 0.  Otherwise, the
            distance is the Euclidean distance between the closest points.
            </summary>
            <param name="box">Box to calculate distance to</param>
            <returns>The distance between this and another <see cref="T:SharpMap.Geometries.BoundingBox"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Distance(SharpMap.Geometries.Point)">
            <summary>
            Computes the minimum distance between this BoundingBox and a <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
            <param name="p"><see cref="T:SharpMap.Geometries.Point"/> to calculate distance to.</param>
            <returns>Minimum distance.</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetCentroid">
            <summary>
            Returns the center of the bounding box
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Clone">
            <summary>
            Creates a copy of the BoundingBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.ToString">
            <summary>
            Returns a string representation of the boundingbox as LowerLeft + UpperRight formatted as "MinX,MinY MaxX,MaxY"
            </summary>
            <returns>MinX,MinY MaxX,MaxY</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Equals(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.BoundingBox"/> to compare to.</param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Min">
            <summary>
            Gets or sets the lower left corner.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Max">
            <summary>
            Gets or sets the upper right corner.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Left">
            <summary>
            Gets the left boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Right">
            <summary>
            Gets the right boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Top">
            <summary>
            Gets the top boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Bottom">
            <summary>
            Gets the bottom boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Width">
            <summary>
            Returns the width of the bounding box
            </summary>
            <returns>Width of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Height">
            <summary>
            Returns the height of the bounding box
            </summary>
            <returns>Height of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.LongestAxis">
            <summary>
            Intersection scalar (used for weighting in building the tree) 
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ILocalCoordinateSystem">
            <summary>
            A local coordinate system, with uncertain relationship to the world.
            </summary>
            <remarks>In general, a local coordinate system cannot be related to other coordinate 
            systems. However, if two objects supporting this interface have the same dimension, 
            axes, units and datum then client code is permitted to assume that the two coordinate
            systems are identical. This allows several datasets from a common source (e.g. a CAD
            system) to be overlaid. In addition, some implementations of the Coordinate 
            Transformation (CT) package may have a mechanism for correlating local datums. (E.g. 
            from a database of transformations, which is created and maintained from real-world 
            measurements.)
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ILocalCoordinateSystem.LocalDatum">
            <summary>
            Gets or sets the local datum
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Whitespace">
            <summary>
            Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Providers">
            <summary>
            Provider helper utilities
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.GetProviders">
            <summary>
            Returns a list of available data providers in this assembly
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.MyInterfaceFilter(System.Type,System.Object)">
            <summary>
            Filter method used for searching for objects in an assembly
            </summary>
            <param name="typeObj"></param>
            <param name="criteriaObj"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.Heuristic">
            <summary>
            Heuristics used for tree generation
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.maxdepth">
            <summary>
            Maximum tree depth
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.mintricnt">
            <summary>
            Minimum object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.tartricnt">
            <summary>
            Target object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.minerror">
            <summary>
            Minimum Error metric – the volume of a box + a unit cube.
            The unit cube in the metric prevents big boxes that happen to be flat having a zero result and muddling things up.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree">
            <summary>
            Constructs a Quad-tree node from a object list and creates its children recursively
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._Depth">
            <summary>
            Nodes depth in a tree
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._ID">
            <summary>
            Node ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(System.Collections.Generic.List{SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects},System.UInt32,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Creates a node and either splits the objects recursively into sub-nodes, or stores them at the node depending on the heuristics.
            Tree is built top->down
            </summary>
            <param name="objList">Geometries to index</param>
            <param name="depth">Current depth of tree</param>
            <param name="heurdata">Heuristics data</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor">
            <summary>
            This instantiator is used internally for loading a tree from a file
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.FromFile(System.String)">
            <summary>
            Loads a quadtree from a file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ReadNode(System.UInt32,System.IO.BinaryReader@)">
            <summary>
            Reads a node from a stream recursively
            </summary>
            <param name="depth">Current depth</param>
            <param name="br">Binary reader reference</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveIndex(System.String)">
            <summary>
            Saves the Quadtree to a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveNode(SharpMap.Utilities.SpatialIndexing.QuadTree,System.IO.BinaryWriter@)">
            <summary>
            Saves a node to a stream recursively
            </summary>
            <param name="node">Node to save</param>
            <param name="sw">Reference to BinaryWriter</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ErrorMetric(SharpMap.Geometries.BoundingBox)">
            <summary>
            Calculate the floating point error metric 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Dispose">
            <summary>
            Disposes the node
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Search(SharpMap.Geometries.BoundingBox)">
            <summary>
            Searches the tree and looks for intersections with the boundingbox 'bbox'
            </summary>
            <param name="box">Boundingbox to intersect with</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.IntersectTreeRecursive(SharpMap.Geometries.BoundingBox,SharpMap.Utilities.SpatialIndexing.QuadTree,System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Recursive function that traverses the tree and looks for intersections with a boundingbox
            </summary>
            <param name="box">Boundingbox to intersect with</param>
            <param name="node">Node to search from</param>
            <param name="list">List of found intersections</param>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsLeaf">
            <summary>
            Determines whether the node is a leaf (if data is stored at the node, we assume the node is a leaf)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Box">
            <summary>
            Gets/sets the Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child0">
            <summary>
            Gets/sets the left child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child1">
            <summary>
            Gets/sets the right child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Depth">
            <summary>
            Gets the depth of the current node in the tree
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects">
            <summary>
            BoundingBox and Feature ID structure used for storing in the quadtree 
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.box">
            <summary>
            Boundingbox
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.ID">
            <summary>
            Feature ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ObsoleteFileFormatException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharpMap.Geometries.Polygon">
            <summary>
            A Polygon is a planar Surface, defined by 1 exterior boundary and 0 or more interior boundaries. Each
            interior boundary defines a hole in the Polygon.
            </summary>
            <remarks>
            Vertices of rings defining holes in polygons are in the opposite direction of the exterior ring.
            </remarks>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing,System.Collections.Generic.List{SharpMap.Geometries.LinearRing})">
            <summary>
            Instatiates a polygon based on one extorier ring and a collection of interior rings.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
            <param name="interiorRings">Interior rings</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing)">
            <summary>
            Instatiates a polygon based on one extorier ring.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor">
            <summary>
            Instatiates a polygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.InteriorRing(System.Int32)">
            <summary>
            Returns the Nth interior ring for this Polygon as a LineString
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the polygon to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Polygon in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Equals(SharpMap.Geometries.Polygon)">
            <summary>
            Determines if this Polygon and the specified Polygon object has the same values
            </summary>
            <param name="p">Polygon to compare with</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Polygon.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Polygon.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsSimple">
            <summary>
            Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.ExteriorRing">
            <summary>
            Gets or sets the exterior ring of this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.InteriorRings">
            <summary>
            Gets or sets the interior rings of this Polygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.NumInteriorRing">
            <summary>
            Returns the number of interior rings in this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.Transformations.GeocentricTransform">
            <summary>
            
            </summary>
            <remarks>
            <para>Latitude, Longitude and ellipsoidal height in terms of a 3-dimensional geographic system
            may by expressed in terms of a geocentric (earth centered) Cartesian coordinate reference system
            X, Y, Z with the Z axis corresponding to the earth's rotation axis positive northwards, the X
            axis through the intersection of the prime meridian and equator, and the Y axis through
            the intersection of the equator with longitude 90 degrees east. The geographic and geocentric
            systems are based on the same geodetic datum.</para>
            <para>Geocentric coordinate reference systems are conventionally taken to be defined with the X
            axis through the intersection of the Greenwich meridian and equator. This requires that the equivalent
            geographic coordinate reference systems based on a non-Greenwich prime meridian should first be
            transformed to their Greenwich equivalent. Geocentric coordinates X, Y and Z take their units from
            the units of the ellipsoid axes (a and b). As it is conventional for X, Y and Z to be in metres,
            if the ellipsoid axis dimensions are given in another linear unit they should first be converted
            to metres.</para>
            </remarks>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.es">
            <summary>
            Eccentricity squared : (a^2 - b^2)/a^2
            </summary>
        </member>
        <member name="F:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.ses">
            <summary>
            Second eccentricity squared : (a^2 - b^2)/b^2    
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a geocentric projection object
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{SharpMap.CoordinateSystems.ProjectionParameter})">
            <summary>
            Initializes a geocentric projection object
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.Inverse">
            <summary>
            Returns the inverse of this conversion.
            </summary>
            <returns>IMathTransform that is the reverse of the current conversion.</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.DegreesToMeters(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.MetersToDegrees(SharpMap.Geometries.Point)">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="pnt">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>		
        </member>
        <member name="M:SharpMap.CoordinateSystems.Transformations.GeocentricTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LayerGroup">
            <summary>
            Class for holding a group of layers.
            </summary>
            <remarks>
            The Group layer is useful for grouping a set of layers,
            for instance a set of image tiles, and expose them as a single layer
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.#ctor(System.String)">
            <summary>
            Initializes a new group layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Clone">
            <summary>
            Clones the layer
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Layers">
            <summary>
            Sublayers in the group
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="T:SharpMap.Geometries.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint are
            restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.#ctor">
            <summary>
            Initializes a new MultiPoint collection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Boundary">
            <summary>
            The boundary of a MultiPoint is the empty set (null).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Item(System.Int32)">
            <summary>
            Gets the n'th point in the MultiPoint collection
            </summary>
            <param name="n">Index in collection</param>
            <returns>Point</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Points">
            <summary>
            Gets or sets the MultiPoint collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.CreateDbfIndex``1(System.Int32)">
            <summary>
            Indexes a DBF column in a binary tree [NOT COMPLETE]
            </summary>
            <typeparam name="T">datatype to be indexed</typeparam>
            <param name="ColumnId">Column to index</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the DBase file.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets the feature at the specified Object ID
            </summary>
            <param name="oid"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.LastUpdate">
            <summary>
            Gets the date this file was last updated.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            If the encoding type isn't set, the dbase driver will try to determine the correct <see cref="T:System.Text.Encoding"/>.
            </remarks>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ProjectedCoordinateSystem">
            <summary>
            A 2D cartographic coordinate system.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.#ctor(SharpMap.CoordinateSystems.IHorizontalDatum,SharpMap.CoordinateSystems.IGeographicCoordinateSystem,SharpMap.CoordinateSystems.ILinearUnit,SharpMap.CoordinateSystems.IProjection,System.Collections.Generic.List{SharpMap.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a projected coordinate system
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="geographicCoordinateSystem">Geographic coordinate system</param>
            <param name="linearUnit">Linear unit</param>
            <param name="projection">Projection</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="M:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the GeographicCoordinateSystem.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the <see cref="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">LinearUnits</see>. The linear unit must be the same as the <see cref="T:SharpMap.CoordinateSystems.CoordinateSystem"/> units.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.ProjectedCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.LinearUnit">
            <summary>
            Definition of linear units.
            </summary>
        </member>
        <member name="M:SharpMap.CoordinateSystems.LinearUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of a linear unit
            </summary>
            <param name="metersPerUnit">Number of meters per <see cref="T:SharpMap.CoordinateSystems.LinearUnit"/></param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:SharpMap.CoordinateSystems.LinearUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.Metre">
            <summary>
            Returns the meters linear unit.
            Also known as International metre. SI standard unit.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.Foot">
            <summary>
            Returns the foot linear unit (1ft = 0.3048m).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.USSurveyFoot">
            <summary>
            Returns the US Survey foot linear unit (1ftUS = 0.304800609601219m).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.NauticalMile">
            <summary>
            Returns the Nautical Mile linear unit (1NM = 1852m).
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.ClarkesFoot">
            <summary>
            Returns Clarke's foot.
            </summary>
            <remarks>
            Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre. 
            Used in older Australian, southern African &amp; British West Indian mapping.
            </remarks>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per <see cref="T:SharpMap.CoordinateSystems.LinearUnit"/>.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:SharpMap.CoordinateSystems.LinearUnit.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="T:SharpMap.CoordinateSystems.ILocalDatum">
            <summary>
            Local datum. If two local datum objects have the same datum type and name, 
            then they can be considered equal. This means that coordinates can be
            transformed between two different local coordinate systems, as long as
            they are based on the same local datum.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WKBGeometryType">
            <summary>
            Enumeration to determine geometrytype in Well-known Binary
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities">
            <summary>
            Class for generating the WmsCapabilities Xml
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.GetCapabilities(SharpMap.Map,SharpMap.Web.Wms.Capabilities.WmsServiceDescription)">
            <summary>
            Generates a capabilities file from a map object for use in WMS services
            </summary>
            <remarks>The capabilities document uses the v1.3.0 OpenGIS WMS specification</remarks>
            <param name="map">The map to create capabilities for</param>
            <param name="serviceDescription">Additional description of WMS</param>
            <returns>Returns XmlDocument describing capabilities</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsServiceDescription">
            <summary>
            The Wms Service Description stores metadata parameters for a WMS service
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a WmsServiceDescription object
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Title">
            <summary>
            Mandatory Human-readable title for pick lists
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Abstract">
            <summary>
            Optional narrative description providing additional information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Keywords">
            <summary>
            Optional list of keywords or keyword phrases describing the server as a whole to help catalog searching
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.OnlineResource">
            <summary>
            Mandatory Top-level web address of service or service provider.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.ContactInformation">
            <summary>
            Optional WMS contact information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Fees">
            <summary>
            The optional element "Fees" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            fees, as follows: "none".
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.AccessConstraints">
            <summary>
            <para>The optional element "AccessConstraints" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            access constraints, as follows: "none".</para>
            <para>When constraints are imposed, no precise syntax has been defined for the text content of these elements, but
            client applications may display the content for user information and action.</para>
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.LayerLimit">
            <summary>
            Maximum number of layers allowed (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxWidth">
            <summary>
            Maximum width allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxHeight">
            <summary>
            Maximum height allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation">
            <summary>
            Stores contact metadata about WMS service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.PersonPrimary">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Position">
            <summary>
            Position of contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.VoiceTelephone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.FacsimileTelephone">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ElectronicMailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson">
            <summary>
            Information about a contact person for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Person">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Organisation">
            <summary>
            Organisation of primary person
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress">
            <summary>
            Information about a contact address for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.AddressType">
            <summary>
            Type of address (usually "postal").
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Address">
            <summary>
            Contact address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.City">
            <summary>
            Contact City
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.StateOrProvince">
            <summary>
            State or province of contact
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.PostCode">
            <summary>
            Zipcode of contact
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Country">
            <summary>
            Country of contact address
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Transform">
            <summary>
            Class for transforming between world and image coordinate
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldtoMap(SharpMap.Geometries.Point,SharpMap.Map)">
            <summary>
            Transforms from world coordinate system (WCS) to image coordinates
            NOTE: This method DOES NOT take the MapTransform property into account (use SharpMap.Map.MapToWorld instead)
            </summary>
            <param name="p">Point in WCS</param>
            <param name="map">Map reference</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Transforms from image coordinates to world coordinate system (WCS).
            NOTE: This method DOES NOT take the MapTransform property into account (use SharpMap.Map.MapToWorld instead)
            </summary>
            <param name="p">Point in image coordinate system</param>
            <param name="map">Map reference</param>
            <returns>Point in WCS</returns>
        </member>
        <member name="T:SharpMap.Geometries.SpatialRelations">
            <summary>
            Class defining a set of named spatial relationship operators for geometric shape objects.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Contains(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is wholly contained within the source geometry. This is the same as
            reversing the primary and comparison shapes of the Within operation.
            </summary>
            <param name="sourceGeometry"></param>
            <param name="otherGeometry"></param>
            <returns>True if otherGeometry is wholly contained within the source geometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Crosses(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the intersection of the two geometries results in a geometry whose dimension is less than
            the maximum dimension of the two geometries and the intersection geometry is not equal to either.
            geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Disjoint(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is disjoint from the source geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Equals(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is of the same type and defines the same point set as the source geometry.
            </summary>
            <param name="g1">source geometry</param>
            <param name="g2">other Geometry</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Intersects(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if there is any intersection between the two geometries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Overlaps(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the intersection of the two geometries results in an object of the same dimension as the
            input geometries and the intersection geometry is not equal to either geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Touches(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the only points in common between the two geometries lie in the union of their boundaries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Within(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the primary geometry is wholly contained within the comparison geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeType">
            <summary>
            Shapefile geometry type.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Null">
            <summary>
            Null shape with no geometric data
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Point">
            <summary>
            A point consists of a pair of double-precision coordinates.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLine">
            <summary>
            PolyLine is an ordered set of vertices that consists of one or more parts. A part is a
            connected sequence of two or more points. Parts may or may not be connected to one
            another. Parts may or may not intersect one another.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Polygon">
            <summary>
            A polygon consists of one or more rings. A ring is a connected sequence of four or more
            points that form a closed, non-self-intersecting loop. A polygon may contain multiple
            outer rings. The order of vertices or orientation for a ring indicates which side of the ring
            is the interior of the polygon. The neighborhood to the right of an observer walking along
            the ring in vertex order is the neighborhood inside the polygon. Vertices of rings defining
            holes in polygons are in a counterclockwise direction. Vertices for a single, ringed
            polygon are, therefore, always in clockwise order. The rings of a polygon are referred to
            as its parts.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Multipoint">
            <summary>
            A MultiPoint represents a set of points.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointZ">
            <summary>
            A PointZ consists of a triplet of double-precision coordinates plus a measure.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineZ">
            <summary>
            A PolyLineZ consists of one or more parts. A part is a connected sequence of two or
            more points. Parts may or may not be connected to one another. Parts may or may not
            intersect one another.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonZ">
            <summary>
            A PolygonZ consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            A PolygonZ may contain multiple outer rings. The rings of a PolygonZ are referred to as
            its parts.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointZ">
            <summary>
            A MultiPointZ represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointZ"/>s.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointM">
            <summary>
            A PointM consists of a pair of double-precision coordinates in the order X, Y, plus a measure M.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineM">
            <summary>
            A shapefile PolyLineM consists of one or more parts. A part is a connected sequence of
            two or more points. Parts may or may not be connected to one another. Parts may or may
            not intersect one another.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonM">
            <summary>
            A PolygonM consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointM">
            <summary>
            A MultiPointM represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointM"/>s.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPatch">
            <summary>
            A MultiPatch consists of a number of surface patches. Each surface patch describes a
            surface. The surface patches of a MultiPatch are referred to as its parts, and the type of
            part controls how the order of vertices of an MultiPatch part is interpreted.
            SharpMap doesn't support this feature type.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile">
            <summary>
            Shapefile dataprovider
            </summary>
            <remarks>
            <para>The ShapeFile provider is used for accessing ESRI ShapeFiles. The ShapeFile should at least contain the
            [filename].shp, [filename].idx, and if feature-data is to be used, also [filename].dbf file.</para>
            <para>The first time the ShapeFile is accessed, SharpMap will automatically create a spatial index
            of the shp-file, and save it as [filename].shp.sidx. If you change or update the contents of the .shp file,
            delete the .sidx file to force SharpMap to rebuilt it. In web applications, the index will automatically
            be cached to memory for faster access, so to reload the index, you will need to restart the web application
            as well.</para>
            <para>
            M and Z values in a shapefile is ignored by SharpMap.
            </para>
            </remarks>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            myLayer.DataSource = new SharpMap.Data.Providers.ShapeFile(@"C:\data\MyShapeData.shp");
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.tree">
            <summary>
            Tree used for fast query of data
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String)">
            <summary>
            Initializes a ShapeFile DataProvider without a file-based spatial index.
            </summary>
            <param name="filename">Path to shape file</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Finalize">
            <summary>
            Finalizes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseHeader">
            <summary>
            Reads and parses the header of the .shx index file
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseProjection">
            <summary>
            Reads and parses the projection if a projection file exists
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ReadIndex">
            <summary>
            Reads the record offsets from the .shx index file and returns the information in an array
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetShapeIndex(System.UInt32)">
            <summary>
            Gets the file position of the n'th shape
            </summary>
            <param name="n">Shape ID</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.SwapByteOrder(System.Int32)">
            <summary>
            Swaps the byte order of an int32
            </summary>
             <param name="i">Integer to swap</param>
             <returns>Byte Order swapped int32</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndexFromFile(System.String)">
            <summary>
            Loads a spatial index from a file. If it doesn't exist, one is created and saved
            </summary>
            <param name="filename"></param>
            <returns>QuadTree index</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndex(System.String)">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.RebuildSpatialIndex">
            <summary>
            Forces a rebuild of the spatial index. If the instance of the ShapeFile provider
            uses a file-based index the file is rewritten to disk.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetAllFeatureBoundingBoxes">
            <summary>
            Reads all boundingboxes of features in the shapefile. This is used for spatial indexing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries whose bounding box intersects 'bbox'
            </summary>
            <remarks>
            <para>Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.</para>
            <para>This method is much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplifed by their boundingbox, and using the Spatial Index.</para>
            </remarks>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all objects whose boundingbox intersects bbox.
            </summary>
            <remarks>
            <para>
            Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.
            </para>
            </remarks>
            <param name="bbox"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ReadGeometry(System.UInt32)">
            <summary>
            Reads and parses the geometry with ID 'oid' from the ShapeFile
            </summary>
            <remarks><see cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate">Filtering</see> is not applied to this method</remarks>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'.
            Please note that the ShapeFile provider currently doesn't fully support geometryintersection
            and thus only BoundingBox/BoundingBox querying are performed. The results are NOT
            guaranteed to lie withing 'geom'.
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeatureCount">
            <summary>
            Returns the total number of features in the datasource (without any filter applied)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32)">
            <summary>
            Gets a datarow from the datasource at the specified index
            </summary>
            <param name="RowID"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets a datarow from the datasource at the specified index belonging to the specified datatable
            </summary>
            <param name="RowID"></param>
            <param name="dt">Datatable to feature should belong to.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetExtents">
            <summary>
            Returns the extents of the datasource
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system of the ShapeFile. If a shapefile has 
            a corresponding [filename].prj file containing a Well-Known Text 
            description of the coordinate system this will automatically be read.
            If this is not the case, the coordinate system will default to null.
            </summary>
            <exception cref="T:System.ApplicationException">An exception is thrown if the coordinate system is read from file.</exception>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>		
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ShapeType">
            <summary>
            Gets the <see cref="T:SharpMap.Data.Providers.ShapeType">shape geometry type</see> in this shapefile.
            </summary>
            <remarks>
            The property isn't set until the first time the datasource has been opened,
            and will throw an exception if this property has been called since initialization. 
            <para>All the non-Null shapes in a shapefile are required to be of the same shape
            type.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Filename">
            <summary>
            Gets or sets the filename of the shapefile
            </summary>
            <remarks>If the filename changes, indexes will be rebuilt</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Encoding">
            <summary>
            Gets or sets the encoding used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            The DBase default encoding is <see cref="P:System.Text.Encoding.UTF7"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate">
            <summary>
            Filter Delegate Method for limiting the datasource
            </summary>
            <remarks>
            <example>
            Using an anonymous method for filtering all features where the NAME column starts with S:
            <code lang="C#">
            myShapeDataSource.FilterDelegate = new SharpMap.Data.Providers.ShapeFile.FilterMethod(delegate(SharpMap.Data.FeatureDataRow row) { return (!row["NAME"].ToString().StartsWith("S")); });
            </code>
            </example>
            <example>
            Declaring a delegate method for filtering (multi)polygon-features whose area is larger than 5.
            <code>
            myShapeDataSource.FilterDelegate = CountryFilter;
            [...]
            public static bool CountryFilter(SharpMap.Data.FeatureDataRow row)
            {
            	if(row.Geometry.GetType()==typeof(SharpMap.Geometries.Polygon))
            		return ((row.Geometry as SharpMap.Geometries.Polygon).Area&gt;5);
            	if (row.Geometry.GetType() == typeof(SharpMap.Geometries.MultiPolygon))
            		return ((row.Geometry as SharpMap.Geometries.MultiPolygon).Area &gt; 5);
            	else return true;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Data.Providers.ShapeFile.FilterMethod"/>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The connection ID of a shapefile is its filename
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SRID">
            <summary>
            Gets or sets the spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile.FilterMethod">
            <summary>
            Filter Delegate Method
            </summary>
            <remarks>
            The FilterMethod delegate is used for applying a method that filters data from the dataset.
            The method should return 'true' if the feature should be included and false if not.
            <para>See the <see cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate"/> property for more info</para>
            </remarks>
            <seealso cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate"/>
            <param name="dr"><see cref="T:SharpMap.Data.FeatureDataRow"/> to test on</param>
            <returns>true if this feature should be included, false if it should be filtered</returns>
        </member>
        <member name="T:SharpMap.Web.HttpHandler">
            <summary>
            HttpHandler class for web applications
            </summary>
        </member>
        <member name="M:SharpMap.Web.HttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns the requested image in an http imagestream
            </summary>
            <param name="context">HttpContext</param>
        </member>
        <member name="P:SharpMap.Web.HttpHandler.IsReusable">
            <summary>
            Enable Http pooling
            </summary>
        </member>
        <member name="T:SharpMap.Styles.VectorStyle">
            <summary>
            Defines a style used for rendering vector data
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#ctor">
            <summary>
            Initializes a new VectorStyle and sets the default values
            </summary>
            <remarks>
            Default style values when initialized:<br/>
            *LineStyle: 1px solid black<br/>
            *FillStyle: Solid black<br/>
            *Outline: No Outline
            *Symbol: null-reference
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Line">
            <summary>
            Linestyle for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Outline">
            <summary>
            Outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.EnableOutline">
            <summary>
            Specified whether the objects are rendered with or without outlining
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Fill">
            <summary>
            Fillstyle for Polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Symbol">
            <summary>
            Symbol used for rendering points
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolScale">
            <summary>
            Scale of the symbol (defaults to 1)
            </summary>
            <remarks>
            Setting the symbolscale to '2.0' doubles the size of the symbol, where a scale of 0.5 makes the scale half the size of the original image
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolOffset">
            <summary>
            Gets or sets the offset in pixels of the symbol.
            </summary>
            <remarks>
            The symbol offset is scaled with the <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/> property and refers to the offset af <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/>=1.0.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolRotation">
            <summary>
            Gets or sets the rotation of the symbol in degrees (clockwise is positive)
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle">
            <summary>
            Defines a style used for rendering labels
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new LabelStyle
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Font">
            <summary>
            Label Font
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.ForeColor">
            <summary>
            Font color
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.BackColor">
            <summary>
            The background color of the label. Set to transparent brush or null if background isn't needed
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Halo">
            <summary>
            Creates a halo around the text
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Offset">
            <summary>
            Specifies relative position of labels with respect to objects label point
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetection">
            <summary>
            Gets or sets whether Collision Detection is enabled for the labels.
            If set to true, label collision will be tested.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionBuffer">
            <summary>
            Distance around label where collision buffer is active
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.HorizontalAlignment">
            <summary>
            The horisontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.VerticalAlignment">
            <summary>
            The horisontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Left">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Right">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Bottom">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Top">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Middle">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ColorBlend">
            <summary>
            Defines arrays of colors and positions used for interpolating color blending in a multicolor gradient.
            </summary>
            <seealso cref="T:SharpMap.Rendering.Thematics.GradientTheme"/>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.#ctor(System.Drawing.Color[],System.Single[])">
            <summary>
            Initializes a new instance of the ColorBlend class.
            </summary>
            <param name="colors">An array of Color structures that represents the colors to use at corresponding positions along a gradient.</param>
            <param name="positions">An array of values that specify percentages of distance along the gradient line.</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.GetColor(System.Single)">
            <summary>
            Gets the color from the scale at position 'pos'.
            </summary>
            <remarks>If the position is outside the scale [0..1] only the fractional part
            is used (in other words the scale restarts for each integer-part).</remarks>
            <param name="pos">Position on scale between 0.0f and 1.0f</param>
            <returns>Color on scale</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ToBrush(System.Drawing.Rectangle,System.Single)">
            <summary>
            Converts the color blend to a gradient brush
            </summary>
            <param name="rectangle"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.TwoColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from two colors
            </summary>
            <param name="fromColor"></param>
            <param name="toColor"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ThreeColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from three colors
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Colors">
            <summary>
            Gets or sets an array of colors that represents the colors to use at corresponding positions along a gradient.
            </summary>
            <value>An array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions along a gradient.</value>
            <remarks>
            This property is an array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions
            along a gradient. Along with the Positions property, this property defines a multicolor gradient.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Positions">
            <summary>
            Gets or sets the positions along a gradient line.
            </summary>
            <value>An array of values that specify percentages of distance along the gradient line.</value>
            <remarks>
            <para>The elements of this array specify percentages of distance along the gradient line.
            For example, an element value of 0.2f specifies that this point is 20 percent of the total
            distance from the starting point. The elements in this array are represented by float
            values between 0.0f and 1.0f, and the first element of the array must be 0.0f and the
            last element must be 1.0f.</para>
            <pre>Along with the Colors property, this property defines a multicolor gradient.</pre>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow7">
            <summary>
            Gets a linear gradient scale with seven colours making a rainbow from red to violet.
            </summary>
            <remarks>
            Colors span the following with an interval of 1/6:
            { Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Blue, Color.Indigo, Color.Violet }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow5">
            <summary>
            Gets a linear gradient scale with five colours making a rainbow from red to blue.
            </summary>
            <remarks>
            Colors span the following with an interval of 0.25:
            { Color.Red, Color.Yellow, Color.Green, Color.Cyan, Color.Blue }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlackToWhite">
            <summary>
            Gets a linear gradient scale from black to white
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.WhiteToBlack">
            <summary>
            Gets a linear gradient scale from white to black
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToGreen">
            <summary>
            Gets a linear gradient scale from red to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToRed">
            <summary>
            Gets a linear gradient scale from green to red
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToGreen">
            <summary>
            Gets a linear gradient scale from blue to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToBlue">
            <summary>
            Gets a linear gradient scale from green to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToBlue">
            <summary>
            Gets a linear gradient scale from red to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToRed">
            <summary>
            Gets a linear gradient scale from blue to red
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer">
            <summary>
            Label layer class
            </summary>
            <example>
            Creates a new label layer and sets the label text to the "Name" column in the FeatureDataTable of the datasource
            <code lang="C#">
            //Set up a label layer
            SharpMap.Layers.LabelLayer layLabel = new SharpMap.Layers.LabelLayer("Country labels");
            layLabel.DataSource = layCountries.DataSource;
            layLabel.Enabled = true;
            layLabel.LabelColumn = "Name";
            layLabel.Style = new SharpMap.Styles.LabelStyle();
            layLabel.Style.CollisionDetection = true;
            layLabel.Style.CollisionBuffer = new SizeF(20, 20);
            layLabel.Style.ForeColor = Color.White;
            layLabel.Style.Font = new Font(FontFamily.GenericSerif, 8);
            layLabel.MaxVisible = 90;
            layLabel.Style.HorizontalAlignment = SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center;
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.#ctor(System.String)">
            <summary>
            Creates a new instance of a LabelLayer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Clone">
            <summary>
            Clones the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviour">
            <summary>
            Gets or sets labelling behavior on multipart geometries
            </summary>
            <remarks>Default value is <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All"/></remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelFilter">
            <summary>
            Filtermethod delegate for performing filtering
            </summary>
            <remarks>
            Default method is <see cref="M:SharpMap.Rendering.LabelCollisionDetection.SimpleCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.Label})"/>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.TextRenderingHint">
            <summary>
            Specifies the quality of text rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Style">
            <summary>
            Gets or sets the rendering style of the label layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelColumn">
            <summary>
            Data column or expression where label text is extracted from.
            </summary>
            <remarks>
            This property is overriden by the <see cref="P:SharpMap.Layers.LabelLayer.LabelStringDelegate"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelStringDelegate">
            <summary>
            Gets or sets the method for creating a custom label string based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the <see cref="P:SharpMap.Layers.LabelLayer.LabelColumn"/> value.</para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return a string.</para>
            <example>
            Creating a label-text by combining attributes "ROADNAME" and "STATE" into one string, using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.LabelStringDelegate = delegate(SharpMap.Data.FeatureDataRow fdr)
            			{ return fdr["ROADNAME"].ToString() + ", " + fdr["STATE"].ToString(); };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.RotationColumn">
            <summary>
            Data column from where the label rotation is derived.
            If this is empty, rotation will be zero, or aligned to a linestring.
            Rotation are in degrees (positive = clockwise).
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Priority">
            <summary>
            A value indication the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum">
            <summary>
            Labelling behaviour for Multipart geometry collections
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All">
            <summary>
            Place label on all parts (default)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.Largest">
            <summary>
            Place label on object which the greatest length or area.
            </summary>
            <remarks>
            Multipoint geometries will default to <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First"/>
            </remarks>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.CommonCenter">
            <summary>
            The center of the combined geometries
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First">
            <summary>
            Center of the first geometry in the collection (fastest method)
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetLabelMethod">
            <summary>
            Delegate method for creating advanced label texts
            </summary>
            <param name="fdr"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Geometries.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.#ctor">
            <summary>
            Initializes an instance of a MultiLineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.LineStrings">
            <summary>
            Collection of <see cref="T:SharpMap.Geometries.LineString">LineStrings</see> in the <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.IsClosed">
            <summary>
            Returns true if all LineStrings in this MultiLineString is closed (StartPoint=EndPoint for each LineString in this MultiLineString)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Length">
            <summary>
            The length of this MultiLineString which is equal to the sum of the lengths of the element LineStrings.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.SpatialReference">
            <summary>
            Converts spatial reference IDs to a Well-Known Text representation.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.SpatialReference.SridToWkt(System.Int32)">
            <summary>
            Converts a Spatial Reference ID to a Well-known Text representation
            </summary>
            <param name="srid">Spatial Reference ID</param>
            <returns>Well-known text</returns>
        </member>
    </members>
</doc>
